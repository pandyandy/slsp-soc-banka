import streamlit as st
import json
import os
import pandas as pd
import base64
import time
import requests
import re
from datetime import date, datetime, timezone, timedelta

from PIL import Image

# Force reload the database manager to get the latest version
import importlib
import database.snowflake_manager
importlib.reload(database.snowflake_manager)
from database.snowflake_manager import get_db_manager

# ==============================
# OpenAI API konfigur√°cia
# ==============================
try:
    OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
except KeyError:
    OPENAI_API_KEY = None  # Will be handled in the AI functions

OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"


mini_logo_path = os.path.join(os.path.dirname(__file__), "static", "logo_mini.png")
logo_path = os.path.join(os.path.dirname(__file__), "static", "logo.png")

MINI_LOGO = Image.open(mini_logo_path)

# Load and encode logo
with open(logo_path, "rb") as f:
    logo_data = base64.b64encode(f.read()).decode()
st.set_page_config(
    page_title="Soci√°lna banka ‚Äì Dotazn√≠k", 
    page_icon=MINI_LOGO, 
    layout="wide")

def background_color(background_color, text_color, header_text, text=None):
     content = f'<div style="font-size:20px;margin:0px 0;">{header_text}</div>'
     if text:
        content += f'<div style="font-size:16px;margin-top:5px;">{text}</div>'
     
     st.markdown(f'<div style="background-color:{background_color};color:{text_color};border-radius:0px;padding:10px;margin:0px 0;">{content}</div>', unsafe_allow_html=True)

def initialize_connection_once():
    """
    Initialize database connection and check table status (runs only once per session)
    Returns: (db_manager, connection_status, message)
    """
    # Check if already initialized in session state
    if "db_manager" in st.session_state and "connection_initialized" in st.session_state:
        return st.session_state.db_manager, True, "‚úÖ Using cached database connection"
    
    try:
        db_manager = get_db_manager()
        
        # Test connection
        conn = db_manager.get_connection()
        if not conn:
            return None, False, "‚ùå Failed to connect to Snowflake workspace"
        
        # Initialize table if needed (only once)
        table_initialized = db_manager.initialize_table()
        if not table_initialized:
            return db_manager, False, "‚ö†Ô∏è Connected but failed to initialize SLSP_DEMO table"
        
        # Cache in session state
        st.session_state.db_manager = db_manager
        st.session_state.connection_initialized = True
        
        return db_manager, True, "‚úÖ Connected to workspace and SLSP_DEMO table ready"
        
    except Exception as e:
        return None, False, f"‚ùå Connection error: {str(e)}"

def read_table_data(db_manager):
    """
    Read all data from SLSP_DEMO table using cursor and pandas
    Returns: (success, data_list, message)
    """
    try:
        # Use cursor to get data and convert to pandas DataFrame
        with db_manager.get_cursor() as cursor:
            cursor.execute("SELECT CID, DATA, PHASE, LAST_UPDATED FROM SLSP_DEMO ORDER BY CID")
            rows = cursor.fetchall()
            
            if rows:
                # Convert to pandas DataFrame
                df_snowflake = pd.DataFrame(rows, columns=['CID', 'DATA', 'PHASE', 'LAST_UPDATED'])
                
                # Convert DataFrame to list of dictionaries
                data_list = []
                for _, row in df_snowflake.iterrows():
                    try:
                        # Parse JSON data
                        json_data = json.loads(row['DATA']) if row['DATA'] else {}
                        data_list.append({
                            'CID': row['CID'],
                            'DATA': json_data,
                            'DATA_RAW': row['DATA'],
                            'PHASE': row['PHASE'],
                            'LAST_UPDATED': row['LAST_UPDATED']
                        })
                    except json.JSONDecodeError:
                        # Handle invalid JSON
                        data_list.append({
                            'CID': row['CID'],
                            'DATA': {},
                            'DATA_RAW': row['DATA'],
                            'PHASE': row['PHASE'],
                            'LAST_UPDATED': row['LAST_UPDATED']
                        })
                
                return True, data_list, f"üìä Found {len(data_list)} records in SLSP_DEMO table"
            else:
                return True, [], "üìù SLSP_DEMO table is empty"
                
    except Exception as e:
        return False, [], f"‚ùå Error reading table: {str(e)}"


def auto_save_data(db_manager, cid, data_to_save):
    """
    Optimized auto-save function using SnowflakeManager methods
    """
    if not cid or not cid.strip():
        return None, "CID required for auto-save"
    
    cid_value = cid.strip()
    #st.write(cid_value)
    # Check if CID already exists to determine operation type
    existing_data = db_manager.load_form_data(cid_value)
    is_update = existing_data is not None
    
    # Use the optimized save method
    success = db_manager.save_form_data(cid_value, data_to_save)
    
    if success:
        if is_update:
            return "updated", f"Auto-updated CID: {cid_value}"
        else:
            return "created", f"Auto-created CID: {cid_value}"
    else:
        return "error", f"Auto-save failed for CID: {cid_value}"


# ==============================
# AI Helper Functions
# ==============================
def call_openai_completion(prompt, temperature=1, model="gpt-5-mini-2025-08-07h", messages=None):
    """Helper function for calling OpenAI Chat Completions"""
    if not OPENAI_API_KEY:
        raise Exception("OpenAI API key not configured")

    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json",
    }
    
    # Use provided messages or create a simple user message
    if messages is None:
        messages = [{"role": "user", "content": prompt}]
    
    payload = {
        "model": model,
        "messages": messages,
        "temperature": temperature,
        "top_p": 1,
        "frequency_penalty": 0,
        "presence_penalty": 0,
    }
    response = requests.post(OPENAI_API_URL, headers=headers, data=json.dumps(payload))
    if response.status_code == 200:
        data = response.json()
        return data["choices"][0]["message"]["content"].strip()
    else:
        raise Exception(f"Chyba pri volan√≠ OpenAI API: {response.status_code}, {response.text}")


def extract_tzs_history(zivotny_pribeh, tzs_history):
    """Extract TZS history from client's story"""
    prompt = f"""Si asistent bankov√©ho poradcu v Slovenskej Sporiteƒæni. Tvojou √∫lohou je extrahova≈• inform√°cie o ƒçerpan√≠ ≈§≈ΩS (odkladu spl√°tok) za posledn√Ωch 24 mesiacov z poskytnut√©ho ≈æivotn√©ho pr√≠behu klienta a inform√°ci√≠ o ≈§≈ΩS.

Na z√°klade nasleduj√∫ceho ≈æivotn√©ho pr√≠behu klienta a inform√°ci√≠ o ≈§≈ΩS zisti, koƒækokr√°t klient ƒçerpal ≈§≈ΩS (odklad spl√°tok) za posledn√Ωch 24 mesiacov. Ak nie je uveden√© niƒç o ƒçerpan√≠ ≈§≈ΩS, predpokladaj, ≈æe ≈§≈ΩS nebola ƒçerpan√°. Vr√°≈• odpoveƒè v nasleduj√∫com form√°te:
**Poƒçet ≈§≈ΩS (za 24mes.)**: [ƒç√≠slo]
**Zd√¥vodnenie**: [Kr√°tke vysvetlenie, napr. "V texte nie je zmienka o ≈§≈ΩS" alebo "Klient uviedol ƒçerpanie odkladu spl√°tok dvakr√°t v roku 2024"]

≈Ωivotn√Ω pr√≠beh:
{zivotny_pribeh}

≈§≈ΩS hist√≥ria:
{tzs_history}

Anal√Ωza:"""

    result = call_openai_completion(prompt, temperature=1) #, max_tokens=500)

    # Parse TZS count from response
    tzs_count = 0
    try:
        m = re.search(r"\*\*Poƒçet\s*≈§≈ΩS\s*\(za\s*24mes\.\)\*\*\s*:\s*(\d+)", result, re.IGNORECASE)
        if m:
            tzs_count = int(m.group(1))
    except Exception:
        tzs_count = 0

    return tzs_count, result


def check_deferral_sufficiency(zivotny_pribeh, tzs_history, zivotne_naklady, uverove_prods):
    """Check if payment deferral is sufficient to solve the situation"""
    prompt = f"""Si asistent bankov√©ho poradcu v Slovenskej Sporiteƒæni. Tvojou √∫lohou je pos√∫di≈•, ƒçi 6-mesaƒçn√Ω odklad spl√°tok s predƒ∫≈æen√≠m splatnosti o 6 mesiacov vyrie≈°i klientovu finanƒçn√∫ situ√°ciu na z√°klade poskytnut√Ωch inform√°ci√≠. Zabr√°≈à duplicitn√©mu zapoƒç√≠taniu spl√°tok √∫verov uveden√Ωch v cashflow a √∫verov√Ωch produktoch.

≈Ωivotn√Ω pr√≠beh klienta:
{zivotny_pribeh}

≈§≈ΩS hist√≥ria:
{tzs_history}

N√°klady na ≈æivot klienta:
{zivotne_naklady}

√överov√© produkty:
{uverove_prods}

Na z√°klade t√Ωchto inform√°ci√≠ pos√∫ƒè, ƒçi by 6-mesaƒçn√Ω odklad spl√°tok s predƒ∫≈æen√≠m splatnosti o 6 mesiacov vyrie≈°il klientovu situ√°ciu. Zohƒæadni, ƒçi je klientova situ√°cia doƒçasn√° (napr. doƒçasn√° strata pr√≠jmu) a ƒçi po 6 mesiacoch bude schopn√Ω pokraƒçova≈• v spl√°can√≠. Ak odklad nestaƒç√≠ (napr. pretrv√°vaj√∫ci negat√≠vny cashflow alebo hrozba exek√∫cie), odporuƒç pokraƒçovanie do komplexnej anal√Ωzy. V odpovedi uveƒè struƒçn√© zd√¥vodnenie.

**D√¥le≈æit√©**: Ak s√∫ spl√°tky √∫verov uveden√© v "N√°klady na ≈æivot klienta" aj v "√överov√© produkty", zohƒæadni ich iba raz, aby nedo≈°lo k duplicitn√©mu zapoƒç√≠taniu. Skontroluj konzistentnos≈• √∫dajov a pou≈æij sumy zo sekcie "√överov√© produkty" ako prim√°rne, ak s√∫ tam uveden√© podrobnej≈°ie (napr. s √∫rokovou sadzbou alebo zostatkom). Ak s√∫ √∫daje nekonzistentn√©, uveƒè to v zd√¥vodnen√≠.

Odpoveƒè vygeneruj v slovenƒçine a v nasleduj√∫com form√°te:
**V√Ωsledok anal√Ωzy odkladu spl√°tok**:
- Staƒç√≠ odklad: [√Åno/Nie]
- Zd√¥vodnenie: [Kr√°tke vysvetlenie]

Anal√Ωza:"""

    return call_openai_completion(prompt, temperature=1)#, max_tokens=800)


def generate_action_plan(zivotny_pribeh, tzs_history, zivotne_naklady, uverove_prods, history=None):
    """Generate comprehensive action plan for the client"""
    if history is None:
        history = []

    # Build context from history if available
    history_context = ""
    if history:
        history_context = "\n\nPredch√°dzaj√∫ca konverz√°cia:\n"
        for msg in history:
            if msg.get("role") == "user":
                history_context += f"Pou≈æ√≠vateƒæ: {msg.get('content', '')}\n"
            elif msg.get("role") == "assistant":
                history_context += f"Asistent: {msg.get('content', '')}\n"

    prompt = f"""CONTEXT: Sme pracovn√≠ci v banke Slovensk√° Sporiteƒæ≈àa a m√°me na starosti poradenstvo pre klientov, ktor√≠ sa dostali do ≈•a≈ækej ≈æivotnej situ√°cie. Na z√°klade ich ≈æivotn√©ho pr√≠behu, finanƒçnej situ√°cie a √∫verov√Ωch produktov navrhujeme rie≈°enie na mieru.

ROLE: Tvojou √∫lohou je navrhn√∫≈• rie≈°enie pre klienta. Anal√Ωza bude struƒçn√° a jasn√°. Ka≈æd√© rie≈°enie mus√≠ by≈• presne vyƒç√≠slen√©.

TASK: Si asistent bankov√©ho poradcu v SLSP.

1. **Overenie ≈æivotnej situ√°cie**:
   - V p√°r vet√°ch pop√≠≈° situ√°ciu klienta.
   - Over, ƒçi klientova situ√°cia spƒ∫≈àa defin√≠ciu "≈•a≈ækej ≈æivotnej situ√°cie" podƒæa **ZOZNAMU ≈§A≈ΩK√ùCH ≈ΩIVOTN√ùCH SITU√ÅCI√ç** (zoznam nie je koneƒçn√Ω).
   - **Defin√≠cia ≈•a≈ækej ≈æivotnej situ√°cie**: Z√°va≈æn√° udalos≈•, ktor√° sp√¥sobila ak√∫tnu finanƒçn√∫ kr√≠zu, ved√∫cu k bezprostrednej hrozbe straty nehnuteƒænosti (napr. dra≈æba), exek√∫cii alebo in√Ωm likvidaƒçn√Ωm probl√©mom. Klient je "unlikely to pay" (neschopn√Ω spl√°ca≈• z√°v√§zky bez intervencie banky), ƒço je preuk√°zan√© negat√≠vnym a/alebo nedostatoƒçn√Ωm cashflow po pokryt√≠ ≈æivotn√Ωch n√°kladov a spl√°tok.
   - **Kƒæ√∫ƒçov√© krit√©rium finanƒçnej stability**: Klient s v√Ωrazne pozit√≠vnym cashflow (pr√≠jmy v√Ωrazne prevy≈°uj√∫ v√Ωdavky vr√°tane spl√°tok √∫verov) nespƒ∫≈àa defin√≠ciu "≈•a≈ækej ≈æivotnej situ√°cie", aj keƒè za≈æil udalos≈• zo zoznamu, preto≈æe je schopn√Ω spl√°ca≈• z√°v√§zky bez intervencie. **Ak klient ≈æiada prevzatie √∫veru alebo in√© opatrenia z d√¥vodu osobnej t√∫≈æby (napr. oslobodenie inej osoby od dlhu, zlep≈°enie ≈æivotnej √∫rovne, s√∫rodeneck√© vyrovnanie) a nie z d√¥vodu bezprostrednej hrozby straty b√Ωvania alebo exek√∫cie, situ√°cia nespƒ∫≈àa defin√≠ciu "≈•a≈ækej ≈æivotnej situ√°cie".**
   - **Vyl√∫ƒçen√© situ√°cie**:
     - Klienti s pozit√≠vnym cashflow, ktor√≠ s√∫ schopn√≠ spl√°ca≈• svoje z√°v√§zky a prekona≈• finanƒçn√© probl√©my bez intervencie banky (napr. doƒçasn√© zn√≠≈æenie pr√≠jmu, ktor√© neohrozuje ich stabilitu).
     - Klienti ≈æiadaj√∫ci pomoc na zv√Ω≈°enie ≈æivotnej √∫rovne (napr. k√∫pa lep≈°ieho b√Ωvania, dovolenka, auto) alebo udr≈æanie vysokej ≈æivotnej √∫rovne.
     - Klienti, ktor√≠ ≈æiadaj√∫ prevzatie √∫verov alebo in√© opatrenia z d√¥vodu osobn√Ωch preferenci√≠ (napr. vyplatenie s√∫rodenca, prepis nehnuteƒænosti bez ak√∫tnej potreby) a nie z d√¥vodu bezprostrednej finanƒçnej kr√≠zy.
     - Klienti neochotn√≠ prisp√¥sobi≈• v√Ωdavky svojej situ√°cii.
     - Klienti zneu≈æ√≠vaj√∫ci situ√°ciu na z√≠skanie v√Ωhodnej≈°√≠ch podmienok alebo obch√°dzanie ≈°tandardn√Ωch postupov banky.
   - Rie≈°enie poskytni iba klientom, ktor√≠ spƒ∫≈àaj√∫ defin√≠ciu "≈•a≈ækej ≈æivotnej situ√°cie" a s√∫ "unlikely to pay" na z√°klade anal√Ωzy cashflow. Ak klient nespƒ∫≈àa krit√©ri√° (napr. m√° pozit√≠vny cashflow a je schopn√Ω spl√°ca≈•, alebo ≈æiada opatrenia z d√¥vodu osobnej t√∫≈æby), **jasne uveƒè, ≈æe jeho situ√°cia nespƒ∫≈àa defin√≠ciu "≈•a≈ækej ≈æivotnej situ√°cie", vysvetli preƒço (napr. pozit√≠vny cashflow, absencia bezprostrednej hrozby straty b√Ωvania), a odporuƒç ≈°tandardn√© bankov√© produkty (napr. refinancovanie, finanƒçn√© poradenstvo) alebo alternat√≠vne kroky (napr. pr√°vne poradenstvo pre prepis nehnuteƒænosti).**

2. **Navrhni rie≈°enie**:
   - Rie≈°enia zober zo ZOZNAM RIESENI. Zabr√°≈à duplicitn√©mu zapoƒç√≠taniu spl√°tok √∫verov uveden√Ωch v cashflow a √∫verov√Ωch produktoch.
   - Uprednostni rie≈°enia podƒæa ich jednoduchosti a efektivity (ƒç√≠m menej krokov). Ak je to mo≈æn√©, navrhni aj konkr√©tne ƒç√≠seln√© hodnoty (napr. zn√≠≈æenie √∫rokovej sadzby na 3% alebo predƒ∫≈æenie doby splatnosti na 10 rokov).
   - Zmeny zo ZOZNAM RIESENI vie≈° realizova≈• iba na √∫veroch v SLSP. Na ostatn√Ωch √∫veroch odporuƒç spolupr√°cu s p√¥vodn√Ωm veriteƒæom alebo refinancovanie do SLSP (ak m√° klient u≈æ stabilizovan√Ω pr√≠jem), pr√≠padne in√© rie≈°enie v s√∫lade so slovenskou legislat√≠vou.
   - Negat√≠vny cashflow (ak by po poskytnut√≠ rie≈°enia vych√°dzal st√°le v m√≠nuse) kompenzuj radami k optimaliz√°cii pr√≠jmov a v√Ωdavkov (ak je tam priestor). Pri klientoch s pr√≠jmami bl√≠zko hranice chudoby (≈æivotn√©ho minima) navrhni rie≈°enie viac v prospech klienta (lep≈°ie podmienky na √∫veroch, v√Ωraznej≈°ie zn√≠≈æenie spl√°tky) a netlaƒç na klienta za be≈æn√© v√Ωdavky.
   - Navrhnut√Ωm rie≈°en√≠m zohƒæadni ≈•a≈æku situ√°ciu klienta, ale nie na √∫kor banky. Vytvor priestor na ozdravenie klienta, ale nie za ka≈æd√∫ cenu. Rie≈°enie mus√≠ vytv√°ra≈• rovnov√°hu medzi klientom a bankou a zohƒæad≈àova≈• obe strany rovnako.
   - **≈†pecifick√© pravidlo pre odklad spl√°tok (polo≈æka k)**: Odklad spl√°tok na 3-9 mesiacov (polo≈æka k) navrhni **iba** v ak√∫tnych situ√°ci√°ch, kde:
     - Klient m√° **negat√≠vny cashflow** (pr√≠jmy nedok√°≈æu pokry≈• ≈æivotn√© n√°klady a spl√°tky) alebo **cashflow bl√≠zko nuly**, ƒço ohrozuje jeho schopnos≈• pokraƒçova≈• v spl√°can√≠ bez intervencie.
     - Klientova situ√°cia je **doƒçasn√° a ak√∫tna** (napr. strata zamestnania, v√°≈æna choroba, doƒçasn√Ω v√Ωpadok pr√≠jmu), kde odklad spl√°tok je nevyhnutn√Ω na preklenutie kr√°tkodob√©ho obdobia, aby klient mohol pokry≈• z√°kladn√© ≈æivotn√© n√°klady.
     - Ak je odklad spl√°tok s√∫ƒças≈•ou viacer√Ωch opatren√≠, najprv prepoƒç√≠taj vplyv v≈°etkc√Ωh ostatn√Ωch opatren√≠ na cashflow, zisti ƒçi je st√°le negat√≠vny a a≈æ na z√°klade toho pou≈æi aj tento n√°stroj. Ak ostatn√© opatrenia cashflow "opravia" na pozit√≠vny, odklad u≈æ neaplikuj.
     - **Nevhodn√© situ√°cie pre odklad spl√°tok**: Ak m√° klient pozit√≠vny cashflow (pr√≠jmy prevy≈°uj√∫ v√Ωdavky vr√°tane spl√°tok), alebo tak bude po aplikovan√≠ ostatn√Ωch opatren√≠, alebo jeho situ√°cia nie je ak√∫tna (napr. chce si ‚Äûodd√Ωchnu≈•" alebo zlep≈°i≈• ≈æivotn√∫ √∫rove≈à, ale nie je v bezprostrednom riziku nespl√°cania), odklad spl√°tok **nenavrhuj**. Namiesto toho uprednostni in√© rie≈°enia, ako zn√≠≈æenie √∫rokovej sadzby, predƒ∫≈æenie splatnosti alebo optimaliz√°ciu v√Ωdavkov.

3. **Vygeneruj √∫lohy**:
   - √ölohy by mal klient vykona≈• na stabiliz√°ciu finanƒçnej situ√°cie. √ölohy sl√∫≈æia na overenie, ƒçi je ≈æivotn√° situ√°cia naozaj n√°roƒçn√° a na verifik√°ciu tvrden√≠ klienta.
   - Ak situ√°cia nespƒ∫≈àa defin√≠ciu "≈•a≈ækej ≈æivotnej situ√°cie", √∫lohy zameraj na podporu ≈°tandardn√Ωch krokov (napr. konzult√°cia s finanƒçn√Ωm poradcom, pr√°vnikom pre prepis nehnuteƒænosti).

ZOZNAM TAZKYCH ZIVOTNYCH SITUACII: rozvod, smr≈• bl√≠zkeho ƒçloveka, strata zamestnania, narodenie die≈•a≈•a, dlhodob√° alebo veƒæmi ≈•a≈æk√° choroba, invalidita, z√°sadn√© zn√≠≈æenie pr√≠jmu, odchod do starobn√©ho d√¥chodku

ZOZNAM RIESENI: a) zn√≠≈æenie √∫rokovej sadzby (v z√°va≈æn√Ωch pr√≠padoch 0%, najƒçastej≈°ie 3-7%)
              b) uznanie dlhu
              c) rozpustenie ome≈°kania do bud√∫cich spl√°tok
              d) predƒ∫≈æenie doby splatnosti (aj nad r√°mec z√°konn√Ωch podmienok)
              e) prist√∫penie k z√°v√§zku inej osoby
              f) poskytnutie nov√©ho refinanƒçn√©ho √∫veru (iba v pr√≠pade, ≈æe je klient stabilizovan√Ω s dostatoƒçn√Ωm pr√≠jmom a/alebo ak bezprostredne hroz√≠ strata nehnuteƒænosti alebo vznik exek√∫cie v signifikantnej v√Ω≈°ke)
              g) dozabezpeƒçenie existuj√∫ceho √∫veru nehnuteƒænos≈•ou
              h) odpustenie cel√©ho √∫veru alebo jeho ƒçasti
              i) poskytnutie dlhodob√©ho spl√°tkov√©ho kalend√°ra (iba na zosplatnen√Ωch √∫veroch)
              j) nov√°cia √∫veru
              k) doƒçasn√© (najƒçastej≈°ie 3-9 mesiacov, podƒæa potreby) zn√≠≈æenie spl√°tky (v od√¥vodnen√Ωch pr√≠padoch a≈æ na 0 EUR) na preklenutie v√Ωpadku / rapidn√©ho zn√≠≈æenia pr√≠jmu (m√¥≈æe by≈• rovno aj s n√°sledn√Ωm rozpusten√≠m ome≈°kania do bud√∫cich spl√°tok)

ZOZNAM TAZKYCH ZIVOTNYCH SITUACII a ZOZNAM RIESENI nikomu neukazuj, iba ich pou≈æi na generovanie rie≈°enia.

VYSVETLENIE NIEKTOR√ùCH RIE≈†EN√ç A POJMOV:
*Uznanie dlhu* sa realizuje pri zosplatnen√Ωch √∫veroch, kde je vysok√Ω poƒçet dn√≠ ome≈°kania (DPD 150 a viac) ako prevencia proti premlƒçaniu z√°v√§zku.
*Rozpustenie ome≈°kania do bud√∫cich spl√°tok* sa realizuje tak, ≈æe ome≈°kan√° suma sa zapoƒç√≠ta do istiny a spl√°tky sa teda rozpoƒç√≠taj√∫ na cel√∫ zvy≈°n√∫ dobu splatnosti, nie len na nejak√∫ kr√°tku dobu
*Poskytnutie dlhodob√©ho spl√°tkov√©ho kalend√°ra* sa realizuje vtedy, keƒè nie je mo≈æn√© poskytn√∫≈• klientovi refinanƒçn√Ω √∫ver alebo zrealizova≈• nov√°ciu.
*Zosplatnenie √∫veru* je √∫kon, ktor√Ωm banka odst√∫pi od p√¥vodn√©ho spl√°tkov√©ho kalend√°ra najƒçastej≈°ie pre spl√°tkov√∫ nediscipl√≠nu klienta. Klient je v pr√≠pade zosplatnen√©ho √∫veru povinn√Ω vyplati≈• banke cel√Ω zostatok √∫veru do 15 dn√≠. Klient mus√≠ z√≠ska≈• nov√Ω spl√°tkov√Ω kalend√°r.
*Nov√°cia √∫veru* je obnovenie p√¥vodnej splatnosti na zosplatnenom √∫vere (ak by spl√°tkov√Ω kalend√°r mal trva≈• dlh≈°ie ako 2 roky, ale iba ak s√∫ klienti u≈æ stabilizovan√≠)

---

≈Ωivotn√Ω pr√≠beh klienta:
{zivotny_pribeh}

≈§≈ΩS hist√≥ria:
{tzs_history}

N√°klady na ≈æivot klienta:
{zivotne_naklady}

√överov√© produkty:
{uverove_prods}

**D√¥le≈æit√©**: Ak s√∫ spl√°tky √∫verov uveden√© v "N√°klady na ≈æivot klienta" aj v "√överov√© produkty", zohƒæadni ich iba raz, aby nedo≈°lo k duplicitn√©mu zapoƒç√≠taniu. Skontroluj konzistentnos≈• √∫dajov a pou≈æij sumy zo sekcie "√överov√© produkty" ako prim√°rne, ak s√∫ tam uveden√© podrobnej≈°ie (napr. s √∫rokovou sadzbou alebo zostatkom). Ak s√∫ √∫daje nekonzistentn√©, uveƒè to v anal√Ωze a odporuƒç kroky na overenie √∫dajov klientom.

{history_context}

Na z√°klade t√Ωchto inform√°ci√≠ navrhni rie≈°enie na mieru pre klienta.

Anal√Ωza a n√°vrh rie≈°enia:"""

    return call_openai_completion(prompt, temperature=1)


def generate_follow_up_response(follow_up_input, zivotny_pribeh, tzs_history, zivotne_naklady, uverove_prods, history=None):
    """Generate follow-up response for additional questions"""
    if history is None:
        history = []
    
    # Build conversation messages for chat completions
    messages = []
    
    # Add system message with context
    system_message = """Si asistent bankov√©ho poradcu v Slovenskej Sporiteƒæni. Odpoved√°≈° na dopl≈àuj√∫ce ot√°zky k u≈æ vygenerovan√©mu akƒçn√©mu pl√°nu pre klienta v ≈•a≈ækej ≈æivotnej situ√°cii. Buƒè struƒçn√Ω a praktick√Ω v odpovediach."""
    messages.append({"role": "system", "content": system_message})
    
    # Add conversation history
    for msg in history:
        messages.append({"role": msg.get("role", "user"), "content": msg.get("content", "")})
    
    # Add current follow-up question with context
    context_prompt = f"""Kontext klienta:
≈Ωivotn√Ω pr√≠beh: {zivotny_pribeh}
≈§≈ΩS hist√≥ria: {tzs_history}
N√°klady na ≈æivot: {zivotne_naklady}
√överov√© produkty: {uverove_prods}

Dopl≈àuj√∫ca ot√°zka: {follow_up_input}

Odpovedz na ot√°zku v kontexte klientovej situ√°cie."""
    
    messages.append({"role": "user", "content": context_prompt})
    
    return call_openai_completion("", temperature=1, messages=messages)


def format_form_data_for_ai(data_to_save):
    """Format form data for AI analysis"""
    # Extract key information for AI analysis
    zivotny_pribeh = f"{data_to_save.get('pribeh', '')}\n\nRie≈°enie podƒæa klienta: {data_to_save.get('riesenie', '')}"
    
    # Format household information
    domacnost_info = f"""
    Poƒçet ƒçlenov dom√°cnosti: {data_to_save.get('pocet_clenov_domacnosti', 0)}
    Typ bydliska: {', '.join(data_to_save.get('typ_bydliska', []))}
    Pozn√°mky k dom√°cnosti: {data_to_save.get('domacnost_poznamky', '')}
    """
    
    # Format income data
    prijmy_data = data_to_save.get('prijmy_domacnosti', [])
    prijmy_text = "Pr√≠jmy dom√°cnosti:\n"
    if prijmy_data:
        for prijem in prijmy_data:
            prijmy_text += f"- {prijem.get('Kto:', 'N/A')}: TPP/Brig√°da: {prijem.get('ƒåist√Ω mesaƒçn√Ω pr√≠jem (TPP, brig√°da)', 0)}‚Ç¨, Podnikanie: {prijem.get('ƒåist√Ω mesaƒçn√Ω pr√≠jem z podnikania', 0)}‚Ç¨, Soci√°lne d√°vky: {prijem.get('Soci√°lne d√°vky (PN, d√¥chodok, rodiƒçovsk√Ω pr√≠spevok)', 0)}‚Ç¨, In√©: {prijem.get('In√© (v√Ω≈æivn√©, podpora od rodiny)', 0)}‚Ç¨\n"
    else:
        prijmy_text += "≈Ωiadne pr√≠jmy nie s√∫ evidovan√©.\n"
    prijmy_text += f"Pozn√°mky k pr√≠jmom: {data_to_save.get('poznamky_prijmy', '')}"
    
    # Format expenses
    vydavky_text = f"""
    V√Ωdavky dom√°cnosti:
    - B√Ωvanie: N√°jom: {data_to_save.get('najom', 0)}‚Ç¨, Elektrina: {data_to_save.get('elektrina', 0)}‚Ç¨, Plyn: {data_to_save.get('plyn', 0)}‚Ç¨, Voda: {data_to_save.get('voda', 0)}‚Ç¨, K√∫renie: {data_to_save.get('kurenie', 0)}‚Ç¨, Dom√°cnos≈•: {data_to_save.get('domacnost', 0)}‚Ç¨, In√© n√°klady na b√Ωvanie: {data_to_save.get('ine_naklady_byvanie', 0)}‚Ç¨
    - Rodina: Strava: {data_to_save.get('strava_potraviny', 0)}‚Ç¨, Obleƒçenie: {data_to_save.get('oblecenie_obuv', 0)}‚Ç¨, Hygiena: {data_to_save.get('hygiena_kozmetika_drogeria', 0)}‚Ç¨, Lieky: {data_to_save.get('lieky_zdravie', 0)}‚Ç¨, V√Ωdavky na deti: {data_to_save.get('vydavky_na_deti', 0)}‚Ç¨, V√Ω≈æivn√©: {data_to_save.get('vyzivne', 0)}‚Ç¨, Podpora rodiƒçov: {data_to_save.get('podpora_rodicov', 0)}‚Ç¨, Dom√°ce zvierat√°: {data_to_save.get('domace_zvierata', 0)}‚Ç¨
    - Komunik√°cia: TV+Internet: {data_to_save.get('tv_internet', 0)}‚Ç¨, Telef√≥n: {data_to_save.get('telefon', 0)}‚Ç¨, Voln√Ω ƒças: {data_to_save.get('volny_cas', 0)}‚Ç¨, Predplatn√©: {data_to_save.get('predplatne', 0)}‚Ç¨, Alkohol/lot√©ria: {data_to_save.get('alkohol_loteria_zreby', 0)}‚Ç¨, Cigarety: {data_to_save.get('cigarety', 0)}‚Ç¨
    - Doprava: MHD: {data_to_save.get('mhd_autobus_vlak', 0)}‚Ç¨, Auto pohonn√© hmoty: {data_to_save.get('auto_pohonne_hmoty', 0)}‚Ç¨, Auto servis: {data_to_save.get('auto_servis_pzp_dialnicne_poplatky', 0)}‚Ç¨
    - Financie: Sporenie: {data_to_save.get('sporenie', 0)}‚Ç¨, Odvody: {data_to_save.get('odvody', 0)}‚Ç¨, Poistky: {data_to_save.get('poistky', 0)}‚Ç¨, Spl√°tky √∫verov: {data_to_save.get('splatky_uverov', 0)}‚Ç¨
    - Ostatn√©: {data_to_save.get('ine', 0)}‚Ç¨
    Pozn√°mky k v√Ωdavkom: {data_to_save.get('poznamky_vydavky', '')}
    """
    
    # Format debts information
    uvery_data = data_to_save.get('uvery_df', [])
    uvery_text = "√övery a p√¥≈æiƒçky:\n"
    if uvery_data:
        for uver in uvery_data:
            uvery_text += f"- {uver.get('Kde som si po≈æiƒçal?', 'N/A')}: √öƒçel: {uver.get('Na ak√Ω √∫ƒçel?', 'N/A')}, Po≈æiƒçan√©: {uver.get('Koƒæko som si po≈æiƒçal?', 0)}‚Ç¨, Zostatok: {uver.get('Koƒæko e≈°te dl≈æ√≠m?', 0)}‚Ç¨, Mesaƒçn√° spl√°tka: {uver.get('Ak√∫ m√°m mesaƒçn√∫ spl√°tku?', 0)}‚Ç¨, √örokov√° sadzba: {uver.get('√örokov√° sadzba?', 0)}%\n"
    else:
        uvery_text += "≈Ωiadne √∫very nie s√∫ evidovan√©.\n"
    
    exekucie_data = data_to_save.get('exekucie_df', [])
    exekucie_text = "Exek√∫cie:\n"
    if exekucie_data:
        for exekucia in exekucie_data:
            exekucie_text += f"- Exek√∫tor: {exekucia.get('Meno exek√∫tora', 'N/A')}, Pre koho: {exekucia.get('Pre koho exek√∫tor vym√°ha dlh?', 'N/A')}, V√Ω≈°ka: {exekucia.get('Aktu√°lna v√Ω≈°ka exek√∫cie?', 0)}‚Ç¨, Mesaƒçn√° spl√°tka: {exekucia.get('Akou sumou ju mesaƒçne spl√°cam?', 0)}‚Ç¨\n"
    else:
        exekucie_text += "≈Ωiadne exek√∫cie nie s√∫ evidovan√©.\n"
    
    nedoplatky_data = data_to_save.get('nedoplatky_data', [])
    nedoplatky_text = "Nedoplatky:\n"
    if nedoplatky_data:
        for nedoplatok in nedoplatky_data:
            nedoplatky_text += f"- {nedoplatok.get('Kde m√°m nedoplatok?', 'N/A')}: V√Ω≈°ka: {nedoplatok.get('V akej v√Ω≈°ke m√°m nedoplatok?', 0)}‚Ç¨, Mesaƒçn√° spl√°tka: {nedoplatok.get('Akou sumou ho mesaƒçne spl√°cam?', 0)}‚Ç¨\n"
    else:
        nedoplatky_text += "≈Ωiadne nedoplatky nie s√∫ evidovan√©.\n"
    
    dlhy_text = f"{uvery_text}\n{exekucie_text}\n{nedoplatky_text}\nPozn√°mky k dlhom: {data_to_save.get('poznamky_dlhy', '')}"
    
    return zivotny_pribeh, domacnost_info, prijmy_text, vydavky_text, dlhy_text



def main():
    st.markdown(f"""
        <div style="
            background-color: #2870ed; 
            padding: 20px; 
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        ">
            <div>
                <div style="color: white; font-size: 32px; font-weight: bold;">
                    Soci√°lna banka ‚Äì Dotazn√≠k
                </div>
            </div>
            <div>
                <img src="data:image/png;base64,{logo_data}" style="height: 60px;" />
            </div>
        </div>
        """, unsafe_allow_html=True)
    # Initialize database connection and read data only when needed
    db_manager = None
    conn_status = False
    conn_message = ""
    
    # Show existing data if available
   # if table_data:
    #    st.write(table_data)
        #col_expander, col_refresh = st.columns([4, 1])
        #with col_expander:
            #show_records = st.checkbox(f"üìã View Existing Records ({len(table_data)} found)", value=False)
       # with col_refresh:
        #    st.write("")  # Space for alignment
         #   if st.button("üîÑ Refresh"):
                # Clear cache to force refresh
          #      for key in ["table_data", "table_data_loaded", "table_read_message"]:
           #         if key in st.session_state:
            #            del st.session_state[key]
             #   st.rerun()
        
        #if show_records:
         #   for i, record in enumerate(table_data):
          #      st.write(f"**Record {i+1}: CID = {record['CID']}**")
           #     st.write("**Data:**")
            #    st.json(record['DATA'])
             #   st.markdown("---")
    
    with st.sidebar:

        st.header("Vyhƒæada≈• CID")


        # CID input and lookup section
        cid = st.text_input(
            "CID", 
            placeholder="Zadajte CID klienta",
            label_visibility="collapsed",
            )
        lookup_clicked = st.button(
            "Vyhƒæada≈•",
            type="primary",
            #disabled=not cid.strip(), 
            use_container_width=True)
        
        # Display CID lookup status in sidebar
        if st.session_state.get("cid_checked", False) and st.session_state.get("current_cid"):
            st.markdown("---")
            #st.write(st.session_state.cid_exists)
            if st.session_state.get("cid_exists", False):
                st.sidebar.success("Formul√°r n√°jden√Ω")
            else:
                st.sidebar.info("Nov√Ω formul√°r bude vytvoren√Ω")
    
    # Initialize session state for CID lookup
    if "cid_checked" not in st.session_state:
        st.session_state.cid_checked = False
    if "cid_exists" not in st.session_state:
        st.session_state.cid_exists = False
    if "existing_data" not in st.session_state:
        st.session_state.existing_data = {}
    if "current_cid" not in st.session_state:
        st.session_state.current_cid = ""
    
    # Handle CID lookup
    if lookup_clicked and cid.strip():
        # Initialize database connection only when user clicks "Vyhƒæada≈•"
        if "db_manager" not in st.session_state:
            db_manager, conn_status, conn_message = initialize_connection_once()
        else:
            db_manager, conn_status, conn_message = initialize_connection_once()
        
        # Check if connection was successful
        if not db_manager:
            st.error("‚ùå Failed to connect to database. Please try again.")
            st.stop()
        
        # Use the optimized database manager method to get data with metadata
        existing_data = db_manager.load_form_data(cid.strip())
        
        if existing_data:
            cid_exists = True
            # Remove metadata from form data before storing in session
            form_data = {k: v for k, v in existing_data.items() if not k.startswith('_')}
            message = f"‚úÖ CID '{cid}' found in database"
        else:
            cid_exists = False
            form_data = {}
            message = f"üìù No record found for CID '{cid}'. A new form will be created."
        
        st.session_state.cid_checked = True
        st.session_state.cid_exists = cid_exists
        st.session_state.existing_data = form_data
        st.session_state.current_cid = cid.strip()
        st.session_state.last_updated_info = existing_data.get('_last_updated', None) if existing_data else None
        st.session_state.needs_fix = False  # Reset fix flag on successful load
        
        # Reset income data to force reload from database on next form render
        if 'prijmy_domacnosti' in st.session_state:
            del st.session_state.prijmy_domacnosti
        
        # Display lookup result immediately
        if cid_exists is True:
            st.sidebar.markdown("---")
            st.sidebar.success(f"Formul√°r n√°jden√Ω")
        elif cid_exists is False:
            st.sidebar.markdown("---")
            st.sidebar.info(f"Nov√Ω formul√°r bude vytvoren√Ω")
        
        # Show last updated info immediately when CID is found
        if st.session_state.get('last_updated_info'):
            try:
                # Parse UTC time
                last_updated = datetime.fromisoformat(st.session_state.last_updated_info.replace('Z', '+00:00'))
                
                # Convert to CET (UTC+1)
                cet = timezone(timedelta(hours=1))
                last_updated_cet = last_updated.astimezone(cet)
                
                st.sidebar.info(f"üïí Formul√°r bol naposledy upraven√Ω: {last_updated_cet.strftime('%d.%m.%Y o %H:%M')} CET")
            except:
                st.sidebar.finfo(f"üïí Formul√°r bol naposledy upraven√Ω: {st.session_state.last_updated_info}")
    
    # Reset if CID changed
    if cid.strip() != st.session_state.current_cid:
        st.session_state.cid_checked = False
        st.session_state.needs_fix = False  # Reset fix flag when CID changes
    
    # Show data entry form only after CID is checked and database is connected
    if st.session_state.cid_checked and cid.strip() and "db_manager" in st.session_state:
        # Add fix button for corrupted data
        if st.session_state.get('needs_fix', False):
            st.markdown("---")
            st.warning("‚ö†Ô∏è This CID has corrupted data that needs fixing.")
            
            col1, col2, col3 = st.columns([1, 1, 2])
            with col1:
                if st.button("üîß Fix This CID", type="primary"):
                    #with st.spinner("Fixing corrupted data..."):
                    db_manager = st.session_state.get("db_manager")
                    if db_manager:
                        success = db_manager.fix_corrupted_record(cid.strip())
                        if success:
                            st.success("‚úÖ CID fixed successfully! Please refresh the page.")
                            st.rerun()
                        else:
                            st.error("‚ùå Failed to fix CID. Please contact support.")
                    else:
                        st.error("‚ùå Database not connected. Please try searching again.")
            
            with col2:
                if st.button("üîÑ Refresh Page"):
                    st.rerun()
            
            with col3:
                st.info("üí° The fix will clean up quotes, newlines, and other problematic characters.")
        
        #st.markdown("---")
        # Pre-fill values if existing data found
        default_meno_priezvisko = st.session_state.existing_data.get("meno_priezvisko", "")
        default_datum_narodenia = st.session_state.existing_data.get("datum_narodenia", date(1900, 1, 1))
        default_sap_id = st.session_state.existing_data.get("sap_id", "")
        default_email_zamestnanca = st.session_state.existing_data.get("email_zamestnanca", "@slsp.sk")

        default_pribeh = st.session_state.existing_data.get("pribeh", "")
        default_riesenie = st.session_state.existing_data.get("riesenie", "")
        default_pocet_clenov_domacnosti = st.session_state.existing_data.get("pocet_clenov_domacnosti", 0)
        default_typ_bydliska = st.session_state.existing_data.get("typ_bydliska", [])
        default_domacnost_poznamky = st.session_state.existing_data.get("domacnost_poznamky", "")
        default_najom = st.session_state.existing_data.get("najom", 0.0)
        default_tv_internet = st.session_state.existing_data.get("tv_internet", 0.0)
        default_oblecenie_obuv = st.session_state.existing_data.get("oblecenie_obuv", 0.0)
        default_sporenie = st.session_state.existing_data.get("sporenie", 0.0)
        default_elektrina = st.session_state.existing_data.get("elektrina", 0.0)
        default_lieky_zdravie = st.session_state.existing_data.get("lieky_zdravie", 0.0)
        default_vydavky_na_deti = st.session_state.existing_data.get("vydavky_na_deti", 0.0)
        default_vyzivne = st.session_state.existing_data.get("vyzivne", 0.0)
        default_voda = st.session_state.existing_data.get("voda", 0.0)
        default_hygiena_kozmetika_drogeria = st.session_state.existing_data.get("hygiena_kozmetika_drogeria", 0.0)
        default_domace_zvierata = st.session_state.existing_data.get("domace_zvierata", 0.0)
        default_podpora_rodicov = st.session_state.existing_data.get("podpora_rodicov", 0.0)
        default_plyn = st.session_state.existing_data.get("plyn", 0.0)
        default_strava_potraviny = st.session_state.existing_data.get("strava_potraviny", 0.0)
        default_predplatne = st.session_state.existing_data.get("predplatne", 0.0)
        default_odvody = st.session_state.existing_data.get("odvody", 0.0)
        default_poistky = st.session_state.existing_data.get("poistky", 0.0)
        default_splatky_uverov = st.session_state.existing_data.get("splatky_uverov", 0.0)
        default_domacnost = st.session_state.existing_data.get("domacnost", 0.0)
        default_kurenie = st.session_state.existing_data.get("kurenie", 0.0)
        default_mhd_autobus_vlak = st.session_state.existing_data.get("mhd_autobus_vlak", 0.0)
        default_cigarety = st.session_state.existing_data.get("cigarety", 0.0)
        default_ine = st.session_state.existing_data.get("ine", 0.0)
        default_ine_naklady_byvanie = st.session_state.existing_data.get("ine_naklady_byvanie", 0.0)
        default_auto_pohonne_hmoty = st.session_state.existing_data.get("auto_pohonne_hmoty", 0.0)
        default_alkohol_loteria_zreby = st.session_state.existing_data.get("alkohol_loteria_zreby", 0.0)
        default_telefon = st.session_state.existing_data.get("telefon", 0.0)
        default_auto_servis_pzp_dialnicne_poplatky = st.session_state.existing_data.get("auto_servis_pzp_dialnicne_poplatky", 0.0)
        default_volny_cas = st.session_state.existing_data.get("volny_cas", 0.0)
        default_poznamky_vydavky = st.session_state.existing_data.get("poznamky_vydavky", "")
        default_komentar_pracovnika_slsp = st.session_state.existing_data.get("komentar_pracovnika_slsp", "")

        default_poznamky_prijmy = st.session_state.existing_data.get("poznamky_prijmy", "")
        default_prijmy_domacnosti = st.session_state.existing_data.get("prijmy_domacnosti", [])
        default_uvery_domacnosti = st.session_state.existing_data.get("uvery_df", [])
        default_exekucie_domacnosti = st.session_state.existing_data.get("exekucie_df", [])
        default_nedoplatky_data = st.session_state.existing_data.get("nedoplatky_data", [])

        default_poznamky_dlhy = st.session_state.existing_data.get("poznamky_dlhy", "")
                
        # Employee information section
        col1, col2, col3 = st.columns(3)
        with col1:
            st.write("SAP ID zamestnanca:")
            sap_id = st.text_input(
                "SAP ID zamestnanca:",
                value=default_sap_id,
                label_visibility="collapsed",
            )
        
        with col2:
            st.write("E-mail zamestnanca:")
            # Initialize email with @slsp.sk if not set
            if "email_zamestnanca" not in st.session_state or not st.session_state.email_zamestnanca:
                st.session_state.email_zamestnanca = "@slsp.sk"
            
            email_zamestnanca = st.text_input(
                "E-mail zamestnanca:",
                value=default_email_zamestnanca,
                help="E-mail mus√≠ konƒçi≈• dom√©nou @slsp.sk",
                label_visibility="collapsed",
            )
            if email_zamestnanca and not email_zamestnanca.endswith("@slsp.sk"):
                st.warning("E-mail mus√≠ konƒçi≈• dom√©nou @slsp.sk", icon="‚ö†Ô∏è")
        
        with col3:
            st.write("Dne≈°n√Ω d√°tum:")
            dnesny_datum = st.date_input(
                "Dne≈°n√Ω d√°tum:", 
                value="today",
                format="DD.MM.YYYY",
                label_visibility="collapsed",
            )
        col1, col2 = st.columns(2)
        with col1:
            st.write("Meno a priezvisko klienta:")
            meno_priezvisko = st.text_input(
                "Meno a priezvisko klienta:",
                value=default_meno_priezvisko,
                label_visibility="collapsed",
            )

        with col2:
            st.write("D√°tum narodenia:")
            datum_narodenia = st.date_input(
                "D√°tum narodenia:",
                min_value=date(1900, 1, 1),
                max_value="today",
                format="DD.MM.YYYY",
                value=default_datum_narodenia,
                label_visibility="collapsed",
            )
        ""
        background_color(
            background_color="#2870ed", 
            text_color="#ffffff", 
            header_text="1. ≈Ωivotn√° situ√°cia",
            #header_text="1. Pr√≠beh klienta", 
            #text="Ako ste sa dostali do finanƒçn√Ωch probl√©mov? ƒåo sa zmenilo vo va≈°om ≈æivote? Situ√°cia st√°le trv√° alebo u≈æ je vyrie≈°en√°?"
        )
        with st.container(border=True):
            st.markdown("#### Pr√≠beh klienta")
            st.markdown("Ako ste sa dostali do finanƒçn√Ωch probl√©mov? ƒåo sa zmenilo vo va≈°om ≈æivote? Situ√°cia st√°le trv√° alebo u≈æ je vyrie≈°en√°?")
            pribeh = st.text_area(
                "Pr√≠beh klienta",
                value=default_pribeh,
                label_visibility="collapsed",
                height=150,
                key="pribeh_textarea"
            )
       # background_color(
        #    background_color="#2870ed",
         #   text_color="#ffffff", 
          #  header_text="2. Rie≈°enie podƒæa klienta", 
         #   text="Ako by ste chceli rie≈°i≈• Va≈°u finanƒçn√∫ situ√°ciu? Ako V√°m m√¥≈æeme pom√¥c≈• my? Koƒæko by ste vedeli mesaƒçne spl√°ca≈•?"
        #)
        #with st.container(border=True):
            st.markdown("#### Rie≈°enie podƒæa klienta")
            st.markdown("Ako by ste chceli rie≈°i≈• Va≈°u finanƒçn√∫ situ√°ciu? Ako V√°m m√¥≈æeme pom√¥c≈• my? Koƒæko by ste vedeli mesaƒçne spl√°ca≈•?")
            riesenie = st.text_area(
                "Rie≈°enie podƒæa klienta",
                value=default_riesenie,
                label_visibility="collapsed",
                height=150,
                key="riesenie_textarea"
            )

        background_color(
            background_color="#2870ed", 
            text_color="#ffffff", 
            header_text="2. Dom√°cnos≈•", 
        )
        with st.container(border=True):
            col1, col2 = st.columns([0.4, 0.6])
            with col1:
                st.write("Poƒçet ƒçlenov dom√°cnosti:")
                pocet_clenov_domacnosti = st.number_input(
                    "Poƒçet ƒçlenov dom√°cnosti:",
                    min_value=0,
                    value=default_pocet_clenov_domacnosti,
                    step=1,
                    width=120,
                    label_visibility="collapsed",
                )
            with col2:
                st.write("Typ bydliska:")
                typ_bydliska = st.multiselect(
                    "Typ bydliska:",
                    options=["Byt", "Rodinn√Ω dom", "Dvojgeneraƒçn√° dom√°cnos≈•", "N√°jom", "Ve vlastn√≠ctve"],
                    default=default_typ_bydliska,
                    placeholder="Vyberte typ bydliska",
                    label_visibility="collapsed",
                )

            domacnost_poznamky = st.text_area(
                "Pozn√°mky:", 
                value=default_domacnost_poznamky,
                height=75
            )


                    # Create initial dataframe with the specified columns
            column_names = {
                "kto": "Kto:",
                "tpp_brigada": "ƒåist√Ω mesaƒçn√Ω pr√≠jem (TPP, brig√°da)",
                "podnikanie": "ƒåist√Ω mesaƒçn√Ω pr√≠jem z podnikania", 
                "socialne_davky": "Soci√°lne d√°vky (PN, d√¥chodok, rodiƒçovsk√Ω pr√≠spevok)",
                "ine": "In√© (v√Ω≈æivn√©, podpora od rodiny)"
            }

                    # Initialize prijmy storage in session state
            if "prijmy_domacnosti" not in st.session_state:
                # Check if we have existing data to load
                if default_prijmy_domacnosti:
                    # Load existing income data from database
                    try:
                        loaded_df = pd.DataFrame(default_prijmy_domacnosti)
                        # Ensure all required columns exist
                        required_columns = {
                            "Vybra≈•": "bool",
                            "ID": "string",
                            column_names["kto"]: "string",
                            column_names["tpp_brigada"]: "int",
                            column_names["podnikanie"]: "int",
                            column_names["socialne_davky"]: "int",
                            column_names["ine"]: "int",
                        }
                        
                        for col, dtype in required_columns.items():
                            if col not in loaded_df.columns:
                                if dtype == "bool":
                                    loaded_df[col] = False
                                elif dtype == "string":
                                    loaded_df[col] = ""
                                elif dtype == "int":
                                    loaded_df[col] = 0
                        
                        # Reorder columns to match expected order
                        column_order = ["Vybra≈•", "ID", column_names["kto"], column_names["tpp_brigada"], 
                                    column_names["podnikanie"], column_names["socialne_davky"], column_names["ine"]]
                        st.session_state.prijmy_domacnosti = loaded_df.reindex(columns=column_order, fill_value="")
                    except Exception as e:
                        # If loading fails, create empty dataframe
                        st.session_state.prijmy_domacnosti = pd.DataFrame({
                            "Vybra≈•": pd.Series(dtype="bool"),
                            "ID": pd.Series(dtype="string"),
                            column_names["kto"]: pd.Series(dtype="string"),
                            column_names["tpp_brigada"]: pd.Series(dtype="float"),
                            column_names["podnikanie"]: pd.Series(dtype="float"),
                            column_names["socialne_davky"]: pd.Series(dtype="float"),
                            column_names["ine"]: pd.Series(dtype="float"),
                        })
                else:
                    # Create empty dataframe for new records
                    st.session_state.prijmy_domacnosti = pd.DataFrame({
                        "Vybra≈•": pd.Series(dtype="bool"),
                        "ID": pd.Series(dtype="string"),
                        column_names["kto"]: pd.Series(dtype="string"),
                        column_names["tpp_brigada"]: pd.Series(dtype="float"),
                        column_names["podnikanie"]: pd.Series(dtype="float"),
                        column_names["socialne_davky"]: pd.Series(dtype="float"),
                        column_names["ine"]: pd.Series(dtype="float"),
                    })

            # Ensure selection column exists for older sessions
            if "Vybra≈•" not in st.session_state.prijmy_domacnosti.columns:
                st.session_state.prijmy_domacnosti.insert(0, "Vybra≈•", False)

            # Migrate old data to include ID column
            if "ID" not in st.session_state.prijmy_domacnosti.columns:
                st.session_state.prijmy_domacnosti.insert(1, "ID", "")
                # Generate IDs for existing entries
                for i in range(len(st.session_state.prijmy_domacnosti)):
                    if pd.isna(st.session_state.prijmy_domacnosti.iloc[i]["ID"]) or st.session_state.prijmy_domacnosti.iloc[i]["ID"] == "":
                        st.session_state.prijmy_domacnosti.iloc[i, st.session_state.prijmy_domacnosti.columns.get_loc("ID")] = f"PR{int(time.time()*1000) + i}"

            # Initialize prijmy ID counter if not exists
            if "prijmy_id_counter" not in st.session_state:
                st.session_state.prijmy_id_counter = 1

            initial_data = pd.DataFrame({
                column_names["kto"]: [""],
                column_names["tpp_brigada"]: [0.0], 
                column_names["podnikanie"]: [0.0],
                column_names["socialne_davky"]: [0.0],
                column_names["ine"]: [0.0]
            })

            def _generate_prijmy_id() -> str:
                """Generate a unique ID for income entries"""
                timestamp = int(time.time() * 1000)  # milliseconds since epoch
                counter = st.session_state.prijmy_id_counter
                st.session_state.prijmy_id_counter += 1
                return f"PR{timestamp}{counter:03d}"

            def update_prijmy():
                """Callback function to handle data editor changes and preserve data during reruns"""
                # This function is called when the data editor changes
                # Store the edited data in a separate session state key to prevent loss
                if "prijmy_data" in st.session_state:
                    edited_data = st.session_state["prijmy_data"]
                    if isinstance(edited_data, pd.DataFrame):
                        # Store the edited data in a separate key for persistence
                        # Note: We don't update st.session_state.prijmy_domacnosti here as it causes
                        # the data editor issue described in the Streamlit discussion
                        st.session_state["prijmy_edited_data"] = edited_data.copy()

            def _get_prijmy_data_for_save():
                """Get the most up-to-date prijmy data for saving to database"""
                # If main dataframe is empty, always return empty list (don't use cached data)
                if st.session_state.prijmy_domacnosti.empty:
                    return []
                
                # First try to get edited data, then fall back to main dataframe
                if "prijmy_edited_data" in st.session_state and st.session_state["prijmy_edited_data"] is not None:
                    edited_data = st.session_state["prijmy_edited_data"]
                    if isinstance(edited_data, pd.DataFrame) and not edited_data.empty:
                        # Add ID column back to edited data for saving
                        if "ID" in st.session_state.prijmy_domacnosti.columns:
                            edited_with_id = edited_data.copy()
                            edited_with_id.insert(1, "ID", st.session_state.prijmy_domacnosti["ID"])
                            return edited_with_id.to_dict('records')
                        else:
                            return edited_data.to_dict('records')
                
                # Fall back to main dataframe
                return st.session_state.prijmy_domacnosti.to_dict('records')

            def _get_exekucie_data_for_save():
                """Get the most up-to-date exekucie data for saving to database"""
                # If main dataframe is empty, always return empty list (don't use cached data)
                if st.session_state.exekucie_df.empty:
                    return []
                
                # First try to get edited data, then fall back to main dataframe
                if "exekucie_edited_data" in st.session_state and st.session_state["exekucie_edited_data"] is not None:
                    edited_data = st.session_state["exekucie_edited_data"]
                    if isinstance(edited_data, pd.DataFrame) and not edited_data.empty:
                        # Add ID column back to edited data for saving
                        if "ID" in st.session_state.exekucie_df.columns:
                            edited_with_id = edited_data.copy()
                            edited_with_id.insert(1, "ID", st.session_state.exekucie_df["ID"])
                            return edited_with_id.to_dict('records')
                        else:
                            return edited_data.to_dict('records')
                
                # Fall back to main dataframe
                return st.session_state.exekucie_df.to_dict('records')

            def _get_nedoplatky_data_for_save():
                """Get the most up-to-date nedoplatky data for saving to database"""
                # If main dataframe is empty, always return empty list (don't use cached data)
                if st.session_state.nedoplatky_data.empty:
                    return []
                
                # First try to get edited data, then fall back to main dataframe
                if "nedoplatky_edited_data" in st.session_state and st.session_state["nedoplatky_edited_data"] is not None:
                    edited_data = st.session_state["nedoplatky_edited_data"]
                    if isinstance(edited_data, pd.DataFrame) and not edited_data.empty:
                        # Add ID column back to edited data for saving
                        if "ID" in st.session_state.nedoplatky_data.columns:
                            edited_with_id = edited_data.copy()
                            edited_with_id.insert(1, "ID", st.session_state.nedoplatky_data["ID"])
                            return edited_with_id.to_dict('records')
                        else:
                            return edited_data.to_dict('records')
                
                # Fall back to main dataframe
                return st.session_state.nedoplatky_data.to_dict('records')

            def add_new_prijem():
                """Add a new income row to the dataframe"""
                # First, save any current edits from the data editor to prevent data loss
                # Use the stored edited data if available, otherwise use the current widget data
                edited_data = None
                if "prijmy_edited_data" in st.session_state:
                    edited_data = st.session_state["prijmy_edited_data"]
                elif "prijmy_data" in st.session_state:
                    edited_data = st.session_state["prijmy_data"]
                
                if edited_data is not None and isinstance(edited_data, pd.DataFrame):
                    # Merge the edited data with the main dataframe, preserving IDs
                    if "ID" in st.session_state.prijmy_domacnosti.columns:
                        edited_data_with_id = edited_data.copy()
                        edited_data_with_id.insert(1, "ID", st.session_state.prijmy_domacnosti["ID"])
                        st.session_state.prijmy_domacnosti = edited_data_with_id
                    else:
                        st.session_state.prijmy_domacnosti = edited_data
                
                new_id = _generate_prijmy_id()
                new_row = {
                    "Vybra≈•": False,
                    "ID": new_id,
                    column_names["kto"]: "",
                    column_names["tpp_brigada"]: 0,
                    column_names["podnikanie"]: 0,
                    column_names["socialne_davky"]: 0,
                    column_names["ine"]: 0,
                }
                
                # Add to dataframe
                new_df = pd.DataFrame([new_row])
                st.session_state.prijmy_domacnosti = pd.concat([st.session_state.prijmy_domacnosti, new_df], ignore_index=True)

            # Removed edit_prijmy_dialog function - now using inline editing


            #background_color(
            #    background_color="#2870ed", 
            #    text_color="#ffffff", 
            #    header_text="Pr√≠jmy a v√Ωdavky dom√°cnosti", 
            #)

            #with st.container(border=True):
                # Controls: add / delete selected
            st.markdown("<hr style='border: 1px solid #2870ed'>", unsafe_allow_html=True)
            
            st.markdown("#### Pr√≠jmy dom√°cnosti")
            ctrl_pr1, ctrl_pr2 = st.columns([1, 1], vertical_alignment="bottom")
            
            # Add income button
            with ctrl_pr1:
                if st.button("‚ûï Prida≈• pr√≠jem", use_container_width=True, key="add_prijmy_btn"):
                    add_new_prijem()
                    st.rerun()
            
            # Delete income button  
            with ctrl_pr2:
                if st.button("üóëÔ∏è Zmaza≈• vybran√Ω", use_container_width=True, key="delete_prijmy_btn"):
                    # First, save any current edits from the data editor to prevent data loss
                    edited_data = None
                    if "prijmy_edited_data" in st.session_state:
                        edited_data = st.session_state["prijmy_edited_data"]
                    elif "prijmy_data" in st.session_state:
                        edited_data = st.session_state["prijmy_data"]
                    
                    if edited_data is not None and isinstance(edited_data, pd.DataFrame):
                        # Merge the edited data with the main dataframe, preserving IDs
                        if "ID" in st.session_state.prijmy_domacnosti.columns:
                            edited_data_with_id = edited_data.copy()
                            edited_data_with_id.insert(1, "ID", st.session_state.prijmy_domacnosti["ID"])
                            st.session_state.prijmy_domacnosti = edited_data_with_id
                        else:
                            st.session_state.prijmy_domacnosti = edited_data
                    
                    df = st.session_state.prijmy_domacnosti
                    # Find selected rows
                    if "Vybra≈•" in df.columns:
                        selected_idxs = df.index[df["Vybra≈•"] == True].tolist()
                        if len(selected_idxs) == 0:
                            st.warning("‚ö†Ô∏è Oznaƒçte jeden riadok v tabuƒæke na zmazanie (stƒ∫pec 'Vybra≈•').")
                        elif len(selected_idxs) > 1:
                            st.warning("‚ö†Ô∏è Oznaƒçte iba jeden riadok na zmazanie.")
                        else:
                            # Get the ID of the row being deleted
                            deleted_id = df.iloc[selected_idxs[0]]["ID"] if "ID" in df.columns else "N/A"
                            # Delete the selected row
                            st.session_state.prijmy_domacnosti = df.drop(index=selected_idxs[0]).reset_index(drop=True)
                            #st.success(f"‚úÖ Pr√≠jem {deleted_id} bol zmazan√Ω")
                            st.rerun()
                    else:
                        st.error("‚ùå Chyba: Stƒ∫pec 'Vybra≈•' nebol n√°jden√Ω")

            # Display income entries in an editable table
            prijmy_df = st.session_state.prijmy_domacnosti
            if prijmy_df.empty:
                st.caption("Zatiaƒæ nie s√∫ evidovan√© ≈æiadne pr√≠jmy. Kliknite na '‚ûï Prida≈• pr√≠jem' pre pridanie nov√©ho.")
            else:
                # Create a display version without ID column
                display_df = prijmy_df.drop(columns=["ID"], errors="ignore")
                
                # Configure columns for editing
                editable_column_config = {
                    "Vybra≈•": st.column_config.CheckboxColumn("Vybra≈•"),
                    column_names["kto"]: st.column_config.TextColumn("Kto:", max_chars=200, required=True),
                    column_names["tpp_brigada"]: st.column_config.NumberColumn("ƒåist√Ω mesaƒçn√Ω pr√≠jem (TPP, brig√°da)", min_value=0, step=0.10, format="%.2f ‚Ç¨"),
                    column_names["podnikanie"]: st.column_config.NumberColumn("ƒåist√Ω mesaƒçn√Ω pr√≠jem z podnikania", min_value=0, step=0.10, format="%.2f ‚Ç¨"),
                    column_names["socialne_davky"]: st.column_config.NumberColumn("Soci√°lne d√°vky (PN, d√¥chodok, rodiƒçovsk√Ω pr√≠spevok)", min_value=0, step=0.10, format="%.2f ‚Ç¨"),
                    column_names["ine"]: st.column_config.NumberColumn("In√© (v√Ω≈æivn√©, podpora od rodiny)", min_value=0, step=0.10, format="%.2f ‚Ç¨"),
                }
                edited = st.data_editor(
                    display_df,
                    column_config=editable_column_config,
                    num_rows="fixed",
                    use_container_width=True,
                    hide_index=True,
                    key="prijmy_data",
                    on_change=update_prijmy,
                    row_height=40,
                )
                
                # Store the edited data for persistence across reruns
                # Note: We don't update st.session_state.prijmy_domacnosti here as it causes
                # the data editor issue described in the Streamlit discussion
                st.session_state["prijmy_edited_data"] = edited.copy()

            # Calculate totals for income from the most up-to-date data
            # Clear cached edited data if main dataframe is empty
            if st.session_state.prijmy_domacnosti.empty and "prijmy_edited_data" in st.session_state:
                del st.session_state["prijmy_edited_data"]
            
            prijmy_data_for_totals = _get_prijmy_data_for_save()
            if prijmy_data_for_totals and len(prijmy_data_for_totals) > 0:
                df_prijmy = pd.DataFrame(prijmy_data_for_totals)
                income_columns = [column_names["tpp_brigada"], column_names["podnikanie"], column_names["socialne_davky"], column_names["ine"]]
                for col in income_columns:
                    if col in df_prijmy.columns:
                        df_prijmy[col] = pd.to_numeric(df_prijmy[col], errors="coerce").fillna(0)
                total_income = float(df_prijmy[income_columns].sum().sum())
            else:
                total_income = 0

            st.markdown(f"##### Pr√≠jmy celkom: {total_income} ‚Ç¨")
            
            poznamky_prijmy = st.text_area(
                "Pozn√°mky k pr√≠jmom:",
                height=75,
                value=default_poznamky_prijmy,
            )
            
        #background_color(
        #    background_color="#2870ed", 
        #    text_color="#ffffff", 
        #    header_text="5. V√Ωdavky dom√°cnosti", 
        #)
        #with st.container(border=True):
            st.markdown("<hr style='border: 1px solid #2870ed'>", unsafe_allow_html=True)
            
            st.markdown("#### V√Ωdavky dom√°cnosti")
            #st.markdown("##### B√Ωvanie a dom√°cnos≈•")
            with st.expander(f"B√Ωvanie a dom√°cnos≈•", expanded=True):
                col1, col2, col3, col4 = st.columns(4, vertical_alignment="bottom")
                with col1:
                    st.write("N√°jom (bytospr√°vca, prenaj√≠mateƒæ):")
                    najom = st.number_input(
                        "N√°jom (bytospr√°vca, prenaj√≠mateƒæ):",
                        step=0.10,
                        value=default_najom,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col2:
                    st.write("Elektrina:")
                    elektrina = st.number_input(
                        "Elektrina:",
                        step=0.10,
                        value=default_elektrina,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col3:
                    st.write("Plyn:")
                    plyn = st.number_input(
                        "Plyn:",
                        step=0.10,
                        value=default_plyn,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col4:
                    st.write("Voda:")
                    voda = st.number_input(
                        "Voda:",
                        step=0.10,
                        value=default_voda,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )

                col1, col2, col3, col4 = st.columns(4, vertical_alignment="bottom")
                with col1:
                    st.write("K√∫renie:")
                    kurenie = st.number_input(
                        "K√∫renie:",
                        step=0.10,
                        value=default_kurenie,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col2:
                    st.write("Dom√°cnos≈• (ƒçistiace prostriedky, opravy, vybavenie):")
                    domacnost = st.number_input(
                        "Dom√°cnos≈• (ƒçistiace prostriedky, opravy, vybavenie):",
                        step=0.10,
                        value=default_domacnost,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )                
                with col3:
                    st.write("In√© n√°klady na b√Ωvanie:")
                    ine_naklady_byvanie = st.number_input(
                        "In√© n√°klady na b√Ωvanie:",
                        step=0.10,
                        value=default_ine_naklady_byvanie,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                byvanie_sum = najom + elektrina + plyn + voda + kurenie + domacnost + ine_naklady_byvanie
                st.write(f"**Celkom: {byvanie_sum:.2f} ‚Ç¨**")
 #           ""
            with st.expander("Rodina a osobn√© potreby", expanded=True):
#            st.markdown("##### Rodina a osobn√© potreby")
                col1, col2, col3, col4 = st.columns(4, vertical_alignment="bottom")
                with col1:
                    st.write("Strava a potraviny:")
                    strava_potraviny = st.number_input(
                        "Strava a potraviny:",
                        step=0.10,
                        value=default_strava_potraviny,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col2: 
                    st.write("Obleƒçenie a obuv:")
                    oblecenie_obuv = st.number_input(
                        "Obleƒçenie a obuv:",
                        step=0.10,
                        value=default_oblecenie_obuv,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col3:
                    st.write("Hygiena, kozmetika a drog√©ria:")
                    hygiena_kozmetika_drogeria = st.number_input(
                        "Hygiena, kozmetika a drog√©ria:",
                        step=0.10,
                        value=default_hygiena_kozmetika_drogeria,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col4: 
                    st.write("Lieky, zdravie a zdravotn√≠cko pom√¥cky:")
                    lieky_zdravie = st.number_input(
                        "Lieky, zdravie a zdravotn√≠cko pom√¥cky:",
                        step=0.10,
                        value=default_lieky_zdravie,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )        
                col1, col2, col3, col4 = st.columns(4, vertical_alignment="bottom")
                with col1:
                    st.write("≈†k√¥lka, ≈°kola, kr√∫≈æky, dru≈æina, vreckov√© a in√© v√Ωdavky na deti:")
                    vydavky_na_deti = st.number_input(
                        "≈†k√¥lka, ≈°kola, kr√∫≈æky, dru≈æina, vreckov√© a in√© v√Ωdavky na deti:",
                        step=0.10,
                        value=default_vydavky_na_deti,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col2:
                    st.write("V√Ω≈æivn√©:")
                    vyzivne = st.number_input(
                        "V√Ω≈æivn√©:",
                        step=0.10,
                        value=default_vyzivne,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col3:
                    st.write("Podpora rodiƒçov, rodiny alebo in√Ωch os√¥b:")
                    podpora_rodicov = st.number_input(
                        "Podpora rodiƒçov, rodiny alebo in√Ωch os√¥b:",
                        step=0.10,
                        value=default_podpora_rodicov,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col4:
                    st.write("Dom√°ce zvierat√°:")
                    domace_zvierata = st.number_input(
                        "Dom√°ce zvierat√°:",
                        step=0.10,
                        value=default_domace_zvierata,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                rodina_sum = strava_potraviny + oblecenie_obuv + hygiena_kozmetika_drogeria + lieky_zdravie + vydavky_na_deti + vyzivne + podpora_rodicov + domace_zvierata
                st.write(f"**Celkom: {rodina_sum:.2f} ‚Ç¨**")

            with st.expander("Komunik√°cia a voƒæn√Ω ƒças", expanded=True):
#            st.markdown("##### Komunik√°cia a voƒæn√Ω ƒças")
                col1, col2, col3, col4 = st.columns(4, vertical_alignment="bottom")
                with col1:
                    st.write("TV + Internet:")
                    tv_internet = st.number_input(
                        "TV + Internet:",
                        step=0.10,
                        value=default_tv_internet,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col2:
                    st.write("Telef√≥n:")
                    telefon = st.number_input(
                        "Telef√≥n:",
                        step=0.10,
                        value=default_telefon,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col3: 
                    st.write("Voln√Ω ƒças a dovolenka:")
                    volny_cas = st.number_input(
                        "Voln√Ω ƒças a dovolenka:",
                        step=0.10,
                        value=default_volny_cas,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                
                col1, col2, col3, col4 = st.columns(4, vertical_alignment="bottom")
                with col1:
                    st.write("Predplatn√©  (Tlaƒç, aplik√°cie, permanentky, fitko apod.):")
                    predplatne = st.number_input(
                        "Predplatn√©  (Tlaƒç, aplik√°cie, permanentky, fitko apod.):",
                        step=0.10,
                        value=default_predplatne,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col2:
                    st.write("Alkohol, lot√©ria, ≈æreby, tipovanie, st√°vkovanie a hern√© automaty:")
                    alkohol_loteria_zreby = st.number_input(
                        "Alkohol, lot√©ria, ≈æreby, tipovanie, st√°vkovanie a hern√© automaty:",
                        step=0.10,
                        value=default_alkohol_loteria_zreby,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col3:
                    st.write("Cigarety:")
                    cigarety = st.number_input(
                        "Cigarety:",
                        step=0.10,
                        value=default_cigarety,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                komunikacia_sum = tv_internet + telefon + volny_cas + predplatne + alkohol_loteria_zreby + cigarety
                st.write(f"**Celkom: {komunikacia_sum:.2f} ‚Ç¨**")

            with st.expander("Doprava", expanded=True):
           # st.markdown("##### Doprava")
                col1, col2, col3, col4 = st.columns(4, vertical_alignment="bottom")
                with col1:
                    st.write("MHD, autobus, vlak:")
                    mhd_autobus_vlak = st.number_input(
                        "MHD, autobus, vlak:",
                        step=0.10,
                        value=default_mhd_autobus_vlak,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col2: 
                    st.write("Auto ‚Äì pohonn√© hmoty:")
                    auto_pohonne_hmoty = st.number_input(
                        "Auto ‚Äì pohonn√© hmoty:",
                        step=0.10,
                        value=default_auto_pohonne_hmoty,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col3:
                    st.write("Auto ‚Äì servis, PZP, diaƒæniƒçn√© poplatky:")
                    auto_servis_pzp_dialnicne_poplatky = st.number_input(
                        "Auto ‚Äì servis, PZP, diaƒæniƒçn√© poplatky:",
                        step=0.10,
                        value=default_auto_servis_pzp_dialnicne_poplatky,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                doprava_sum = mhd_autobus_vlak + auto_pohonne_hmoty + auto_servis_pzp_dialnicne_poplatky
                st.write(f"**Celkom: {doprava_sum:.2f} ‚Ç¨**")

            with st.expander("Financie a z√°v√§zky", expanded=True):
            #st.markdown("##### Financie a z√°v√§zky")
                col1, col2, col3, col4 = st.columns(4, vertical_alignment="bottom")
                with col1:
                    st.write("Sporenie:")
                    sporenie = st.number_input(
                        "Sporenie:",
                        step=0.10,
                        value=default_sporenie,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col2:
                    st.write("Odvody (ak si ich plat√≠m s√°m):")
                    odvody = st.number_input(
                        "Odvody (ak si ich plat√≠m s√°m):",
                        step=0.1,
                        value=default_odvody,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col3:
                    st.write("Poistky:")
                    poistky = st.number_input(
                        "Poistky:",
                        step=0.10,
                        value=default_poistky,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                with col4:
                    st.write("Spl√°tky √∫verov:")
                    splatky_uverov = st.number_input(
                        "Spl√°tky √∫verov:",
                        step=0.10,
                        value=default_splatky_uverov,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
                financie_zavazky_sum = sporenie + odvody + poistky + splatky_uverov
                st.write(f"**Celkom: {financie_zavazky_sum:.2f} ‚Ç¨**")
                
            with st.expander("Ostatn√©", expanded=True):
            #st.markdown("##### Ostatn√©")
                col1, col2, col3, col4 = st.columns(4, vertical_alignment="bottom")
                with col1:
                    st.write("In√©:")
                    ine = st.number_input(
                        "In√©:",
                        step=0.10,
                        value=default_ine,
                        min_value=0.0,
                        width=120,
                        label_visibility="collapsed",
                    )
            total_expenses = byvanie_sum + rodina_sum + komunikacia_sum + doprava_sum + financie_zavazky_sum + ine
            # Calculate total expenses
            #expense_keys = [
            #    "najom", "tv_internet", "oblecenie_obuv", "sporenie",
            #    "elektrina", "lieky_zdravie", "vydavky_na_deti", "vyzivne",
            #    "voda", "hygiena_kozmetika_drogeria", "domace_zvierata", "podpora_rodicov",
            #    "plyn", "strava_potraviny", "predplatne", "odvody",
            #    "kurenie", "mhd_autobus_vlak", "cigarety", "ine",
            #    "ine_naklady_byvanie", "auto_pohonne_hmoty", "alkohol_loteria_zreby",
            #    "telefon", "auto_servis_pzp_dialnicne_poplatky", "volny_cas"
            #]
            #total_expenses = sum(st.session_state.get(key, 0) for key in expense_keys)
            
            st.markdown(f"##### **V√Ωdavky celkom: {total_expenses:.2f} ‚Ç¨**")

            poznamky_vydavky = st.text_area(
                "Pozn√°mky k v√Ωdavkom:",
                height=75,
                value=default_poznamky_vydavky
            )

        background_color(
            background_color="#2870ed", 
            text_color="#ffffff", 
            header_text="3. Dlhy", 
        )
        with st.container(border=True):

            # Create debts dataframe with structure from the image
            debts_columns = {
                "kde_som_si_pozical": "Kde som si po≈æiƒçal?",
                "na_aky_ucel": "Na ak√Ω √∫ƒçel?", 
                "kedy_som_si_pozical": "Kedy som si po≈æiƒçal?",
                "urokova_sadzba": "√örokov√° sadzba?",
                "kolko_som_si_pozical": "Koƒæko som si po≈æiƒçal?",
                "kolko_este_dlzim": "Koƒæko e≈°te dl≈æ√≠m?",
                "aku_mam_mesacnu_splatku": "Ak√∫ m√°m mesaƒçn√∫ spl√°tku?"
            }
            
            # First table - √öVERY (Loans)
            st.markdown("#### **√övery**")

            # Define columns mapping (reuse existing headers)
            bank_types = [
                "banka",
                "nebankovka",
                "s√∫kromn√©",
                "p√¥≈æiƒçka od rodiny/priateƒæov",
                "in√©"
            ]
            #bank_type_options = ["‚Äî Vyberte ‚Äî"] + bank_types

            uvery_columns = {
                "kde_som_si_pozical": debts_columns["kde_som_si_pozical"],
                "na_aky_ucel": debts_columns["na_aky_ucel"],
                "kedy_som_si_pozical": debts_columns["kedy_som_si_pozical"],
                "urokova_sadzba": debts_columns["urokova_sadzba"],
                "kolko_som_si_pozical": debts_columns["kolko_som_si_pozical"],
                "kolko_este_dlzim": debts_columns["kolko_este_dlzim"],
                "aku_mam_mesacnu_splatku": debts_columns["aku_mam_mesacnu_splatku"],
            }

            # Initialize loans storage in session state
            if "uvery_df" not in st.session_state:
                # Check if we have existing data to load
                if default_uvery_domacnosti:
                    # Load existing √∫very data from database
                    try:
                        loaded_df = pd.DataFrame(default_uvery_domacnosti)
                        # Ensure all required columns exist
                        required_columns = {
                            "Vybra≈•": "bool",
                            "ID": "string",
                            uvery_columns["kde_som_si_pozical"]: "string",
                            uvery_columns["na_aky_ucel"]: "string",
                            uvery_columns["kedy_som_si_pozical"]: "object",
                            uvery_columns["urokova_sadzba"]: "float",
                            uvery_columns["kolko_som_si_pozical"]: "int",
                            uvery_columns["kolko_este_dlzim"]: "int",
                            uvery_columns["aku_mam_mesacnu_splatku"]: "int",
                        }
                        
                        for col, dtype in required_columns.items():
                            if col not in loaded_df.columns:
                                if dtype == "bool":
                                    loaded_df[col] = False
                                elif dtype == "string":
                                    loaded_df[col] = ""
                                elif dtype == "object":
                                    loaded_df[col] = None
                                elif dtype == "float":
                                    loaded_df[col] = 0.0
                        
                        # Reorder columns to match expected order
                        column_order = ["Vybra≈•", "ID", uvery_columns["kde_som_si_pozical"], uvery_columns["na_aky_ucel"], 
                                      uvery_columns["kedy_som_si_pozical"], uvery_columns["urokova_sadzba"], 
                                      uvery_columns["kolko_som_si_pozical"], uvery_columns["kolko_este_dlzim"], 
                                      uvery_columns["aku_mam_mesacnu_splatku"]]
                        st.session_state.uvery_df = loaded_df.reindex(columns=column_order, fill_value="")
                    except Exception as e:
                        # If loading fails, create empty dataframe
                        st.session_state.uvery_df = pd.DataFrame({
                            "Vybra≈•": pd.Series(dtype="bool"),
                            "ID": pd.Series(dtype="string"),
                            uvery_columns["kde_som_si_pozical"]: pd.Series(dtype="string"),
                            uvery_columns["na_aky_ucel"]: pd.Series(dtype="string"),
                            uvery_columns["kedy_som_si_pozical"]: pd.Series(dtype="object"),  # store date objects
                            uvery_columns["urokova_sadzba"]: pd.Series(dtype="float"),
                            uvery_columns["kolko_som_si_pozical"]: pd.Series(dtype="float"),
                            uvery_columns["kolko_este_dlzim"]: pd.Series(dtype="float"),
                            uvery_columns["aku_mam_mesacnu_splatku"]: pd.Series(dtype="float"),
                        })
                else:
                    # Create empty dataframe for new records
                    st.session_state.uvery_df = pd.DataFrame({
                        "Vybra≈•": pd.Series(dtype="bool"),
                        "ID": pd.Series(dtype="string"),
                        uvery_columns["kde_som_si_pozical"]: pd.Series(dtype="string"),
                        uvery_columns["na_aky_ucel"]: pd.Series(dtype="string"),
                        uvery_columns["kedy_som_si_pozical"]: pd.Series(dtype="object"),  # store date objects
                        uvery_columns["urokova_sadzba"]: pd.Series(dtype="float"),
                        uvery_columns["kolko_som_si_pozical"]: pd.Series(dtype="float"),
                        uvery_columns["kolko_este_dlzim"]: pd.Series(dtype="float"),
                        uvery_columns["aku_mam_mesacnu_splatku"]: pd.Series(dtype="float"),
                    })

            # Ensure selection column exists for older sessions
            if "Vybra≈•" not in st.session_state.uvery_df.columns:
                st.session_state.uvery_df.insert(0, "Vybra≈•", False)
            
            # Migrate old data to include ID column
            if "ID" not in st.session_state.uvery_df.columns:
                st.session_state.uvery_df.insert(1, "ID", "")
                # Generate IDs for existing entries
                for i in range(len(st.session_state.uvery_df)):
                    if pd.isna(st.session_state.uvery_df.iloc[i]["ID"]) or st.session_state.uvery_df.iloc[i]["ID"] == "":
                        st.session_state.uvery_df.iloc[i, st.session_state.uvery_df.columns.get_loc("ID")] = f"UV{int(time.time()*1000) + i}"

            # Initialize loan ID counter if not exists
            if "uvery_id_counter" not in st.session_state:
                st.session_state.uvery_id_counter = 1

            def _generate_uvery_id() -> str:
                """Generate a unique ID for loans"""
                timestamp = int(time.time() * 1000)  # milliseconds since epoch
                counter = st.session_state.uvery_id_counter
                st.session_state.uvery_id_counter += 1
                return f"UV{timestamp}{counter:03d}"

            @st.dialog("Prida≈• nov√Ω √∫ver")
            def add_uver_dialog():
                st.write("Vypl≈àte √∫daje o novom √∫vere:")
                
                with st.form("add_uver_form"):
                    kde_som_si_pozical = st.text_input(
                        uvery_columns["kde_som_si_pozical"],
                        placeholder="Zadajte kde ste si po≈æiƒçali"
                    )
                    
                    na_aky_ucel = st.text_input(
                        uvery_columns["na_aky_ucel"],
                        placeholder="Zadajte √∫ƒçel √∫veru"
                    )
                    
                    kedy_som_si_pozical = st.date_input(
                        uvery_columns["kedy_som_si_pozical"],
                        value=date.today(),
                        min_value=date(1900, 1, 1),
                        format="DD.MM.YYYY"
                    )
                    
                    col1, col2 = st.columns(2, vertical_alignment="bottom")
                    with col1:
                        urokova_sadzba = st.number_input(
                            uvery_columns["urokova_sadzba"] + " (%)",
                            min_value=0.0,
                            max_value=100.0,
                            step=0.1,
                            value=0.0,
                            width=120,
                        )
                        
                        kolko_som_si_pozical = st.number_input(
                            uvery_columns["kolko_som_si_pozical"] + " (‚Ç¨)",
                            min_value=0.0,
                            step=0.10,
                            value=0.0,
                            width=120,
                        )
                    
                    with col2:
                        kolko_este_dlzim = st.number_input(
                            uvery_columns["kolko_este_dlzim"] + " (‚Ç¨)",
                            min_value=0.0,
                            step=0.10,
                            value=0.0,
                            width=120,
                        )
                        
                        mesacna_splatka = st.number_input(
                            uvery_columns["aku_mam_mesacnu_splatku"] + " (‚Ç¨)",
                            min_value=0.0,
                            step=0.10,
                            value=0.0,
                            width=120,
                        )
                    
                    # Form buttons
                    col1, col2 = st.columns(2)
                    with col1:
                        submit = st.form_submit_button("‚úÖ Prida≈• √∫ver", use_container_width=True, type="primary")
                    with col2:
                        cancel = st.form_submit_button("‚ùå Zru≈°i≈•", use_container_width=True)
                    
                    if submit:
                        # Validate required fields
                        if not kde_som_si_pozical.strip():
                            st.error("‚ö†Ô∏è Zadajte kde ste si po≈æiƒçali!")
                            return
                            
                        if not na_aky_ucel.strip():
                            st.warning("‚ö†Ô∏è √öƒçel √∫veru je povinn√Ω!")
                            return
                        
                        # Generate new ID and create record
                        new_id = _generate_uvery_id()
                        new_row = {
                            "Vybra≈•": False,
                            "ID": new_id,
                            uvery_columns["kde_som_si_pozical"]: kde_som_si_pozical.strip(),
                            uvery_columns["na_aky_ucel"]: na_aky_ucel.strip(),
                            uvery_columns["kedy_som_si_pozical"]: kedy_som_si_pozical,
                            uvery_columns["urokova_sadzba"]: float(urokova_sadzba),
                            uvery_columns["kolko_som_si_pozical"]: float(kolko_som_si_pozical),
                            uvery_columns["kolko_este_dlzim"]: float(kolko_este_dlzim),
                            uvery_columns["aku_mam_mesacnu_splatku"]: float(mesacna_splatka),
                        }
                        
                        # Add to dataframe
                        new_df = pd.DataFrame([new_row])
                        st.session_state.uvery_df = pd.concat([st.session_state.uvery_df, new_df], ignore_index=True)
                       # st.success(f"‚úÖ √över {new_id} bol √∫spe≈°ne pridan√Ω!")
                        st.rerun()
                    
                    elif cancel:
                        st.rerun()

            @st.dialog("Upravi≈• √∫ver")
            def edit_uver_dialog(row_index):
                if row_index >= len(st.session_state.uvery_df):
                    st.error("‚ùå Chyba: Riadok neexistuje!")
                    return
                    
                # Get current values
                current_row = st.session_state.uvery_df.iloc[row_index]
                current_id = current_row["ID"]
                
                st.write(f"Upravujete √∫ver: **{current_id}**")
                
                with st.form("edit_uver_form"):
                    # Get current type and set default index
                    current_typ = current_row[uvery_columns["kde_som_si_pozical"]]
                    #default_index = bank_types.index(current_typ) + 1 if current_typ in bank_types else 0
                    
                    kde_som_si_pozical = st.text_input(
                        uvery_columns["kde_som_si_pozical"],
                        value=str(current_row[uvery_columns["kde_som_si_pozical"]] or ""),
                        placeholder="Zadajte kde ste si po≈æiƒçali"
                    )
                    
                    na_aky_ucel = st.text_input(
                        uvery_columns["na_aky_ucel"],
                        value=str(current_row[uvery_columns["na_aky_ucel"]] or ""),
                        placeholder="Zadajte √∫ƒçel √∫veru"
                    )
                    
                    # Handle date properly
                    default_date = current_row[uvery_columns["kedy_som_si_pozical"]]
                    if pd.isna(default_date) or default_date is None or default_date == "":
                        default_date = date.today()
                    
                    kedy_som_si_pozical = st.date_input(
                        uvery_columns["kedy_som_si_pozical"],
                        value=default_date,
                        min_value=date(1900, 1, 1),
                        format="DD.MM.YYYY"
                    )
                    
                    col1, col2 = st.columns(2, vertical_alignment="bottom")
                    with col1:
                        urokova_sadzba = st.number_input(
                            uvery_columns["urokova_sadzba"] + " (%)",
                            min_value=0.0,
                            max_value=100.0,
                            step=0.1,
                            value=float(current_row[uvery_columns["urokova_sadzba"]] or 0.0),
                            width=120,
                        )
                        
                        kolko_som_si_pozical = st.number_input(
                            uvery_columns["kolko_som_si_pozical"] + " (‚Ç¨)",
                            min_value=0.0,
                            step=0.10,
                            value=float(current_row[uvery_columns["kolko_som_si_pozical"]] or 0.0),
                            width=120,
                        )
                    
                    with col2:
                        kolko_este_dlzim = st.number_input(
                            uvery_columns["kolko_este_dlzim"] + " (‚Ç¨)",
                            min_value=0.0,
                            step=0.10,
                            value=float(current_row[uvery_columns["kolko_este_dlzim"]] or 0.0),
                            width=120,
                        )
                        
                        mesacna_splatka = st.number_input(
                            uvery_columns["aku_mam_mesacnu_splatku"] + " (‚Ç¨)",
                            min_value=0.0,
                            step=0.10,
                            value=float(current_row[uvery_columns["aku_mam_mesacnu_splatku"]] or 0.0),
                            width=120,
                        )
                    
                    # Form buttons
                    col1, col2 = st.columns(2)
                    with col1:
                        submit = st.form_submit_button("‚úÖ Ulo≈æi≈• zmeny", use_container_width=True, type="primary")
                    with col2:
                        cancel = st.form_submit_button("‚ùå Zru≈°i≈•", use_container_width=True)
                    
                    if submit:
                        # Validate required fields
                        if not kde_som_si_pozical.strip():
                            st.warning("‚ö†Ô∏è Zadajte kde ste si po≈æiƒçali!")
                            return
                            
                        if not na_aky_ucel.strip():
                            st.warning("‚ö†Ô∏è √öƒçel √∫veru je povinn√Ω!")
                            return
                        
                        # Update the row
                        st.session_state.uvery_df.iloc[row_index, st.session_state.uvery_df.columns.get_loc(uvery_columns["kde_som_si_pozical"])] = kde_som_si_pozical.strip()
                        st.session_state.uvery_df.iloc[row_index, st.session_state.uvery_df.columns.get_loc(uvery_columns["na_aky_ucel"])] = na_aky_ucel.strip()
                        st.session_state.uvery_df.iloc[row_index, st.session_state.uvery_df.columns.get_loc(uvery_columns["kedy_som_si_pozical"])] = kedy_som_si_pozical
                        st.session_state.uvery_df.iloc[row_index, st.session_state.uvery_df.columns.get_loc(uvery_columns["urokova_sadzba"])] = float(urokova_sadzba)
                        st.session_state.uvery_df.iloc[row_index, st.session_state.uvery_df.columns.get_loc(uvery_columns["kolko_som_si_pozical"])] = float(kolko_som_si_pozical)
                        st.session_state.uvery_df.iloc[row_index, st.session_state.uvery_df.columns.get_loc(uvery_columns["kolko_este_dlzim"])] = float(kolko_este_dlzim)
                        st.session_state.uvery_df.iloc[row_index, st.session_state.uvery_df.columns.get_loc(uvery_columns["aku_mam_mesacnu_splatku"])] = float(mesacna_splatka)
                        
                       # st.success(f"‚úÖ √över {current_id} bol √∫spe≈°ne upraven√Ω!")
                        st.rerun()
                    
                    elif cancel:
                        st.rerun()

            # Controls: add / edit / delete selected
            ctrl_uv1, ctrl_uv2, ctrl_uv3 = st.columns([1, 1, 1], vertical_alignment="bottom")
            
            # Add loan button
            with ctrl_uv1:
                if st.button("‚ûï Prida≈• √∫ver", use_container_width=True, key="add_uver_btn"):
                    add_uver_dialog()
            
            # Edit loan button  
            with ctrl_uv2:
                if st.button("‚úèÔ∏è Upravi≈• vybran√Ω", use_container_width=True, key="edit_uver_btn"):
                    df = st.session_state.uvery_df
                    # Find selected rows
                    if "Vybra≈•" in df.columns:
                        selected_idxs = df.index[df["Vybra≈•"] == True].tolist()
                        if len(selected_idxs) == 0:
                            st.warning("‚ö†Ô∏è Oznaƒçte jeden riadok v tabuƒæke na √∫pravu (stƒ∫pec 'Vybra≈•').")
                        elif len(selected_idxs) > 1:
                            st.warning("‚ö†Ô∏è Oznaƒçte iba jeden riadok na √∫pravu.")
                        else:
                            edit_uver_dialog(selected_idxs[0])
                    else:
                        st.error("‚ùå Chyba: Stƒ∫pec 'Vybra≈•' nebol n√°jden√Ω")
            
            # Delete loan button  
            with ctrl_uv3:
                if st.button("üóëÔ∏è Zmaza≈• vybran√Ω", use_container_width=True, key="delete_uver_btn"):
                    df = st.session_state.uvery_df
                    # Find selected rows
                    if "Vybra≈•" in df.columns:
                        selected_idxs = df.index[df["Vybra≈•"] == True].tolist()
                        if len(selected_idxs) == 0:
                            st.warning("‚ö†Ô∏è Oznaƒçte jeden riadok v tabuƒæke na zmazanie (stƒ∫pec 'Vybra≈•').")
                        elif len(selected_idxs) > 1:
                            st.warning("‚ö†Ô∏è Oznaƒçte iba jeden riadok na zmazanie.")
                        else:
                            # Get the ID of the row being deleted
                            deleted_id = df.iloc[selected_idxs[0]]["ID"] if "ID" in df.columns else "N/A"
                            # Delete the selected row
                            st.session_state.uvery_df = df.drop(index=selected_idxs[0]).reset_index(drop=True)
                            #st.success(f"‚úÖ √över {deleted_id} bol zmazan√Ω")
                            st.rerun()
                    else:
                        st.error("‚ùå Chyba: Stƒ∫pec 'Vybra≈•' nebol n√°jden√Ω")

            # Display loans in a clean, read-only table
            uvery_df = st.session_state.uvery_df
            if uvery_df.empty:
                st.caption("Zatiaƒæ nie s√∫ pridan√© ≈æiadne √∫very. Kliknite na '‚ûï Prida≈• √∫ver' pre pridanie nov√©ho.")
            else:
                # Create a display version with proper column order (without ID)
                display_columns = ["Vybra≈•", uvery_columns["kde_som_si_pozical"], uvery_columns["na_aky_ucel"], uvery_columns["kedy_som_si_pozical"], uvery_columns["urokova_sadzba"], uvery_columns["kolko_som_si_pozical"], uvery_columns["kolko_este_dlzim"], uvery_columns["aku_mam_mesacnu_splatku"]]
                df_for_display = uvery_df.reindex(columns=display_columns, fill_value="").copy()
                
                # Configure columns for display only (checkbox for selection, rest disabled)
                display_column_config = {
                    "Vybra≈•": st.column_config.CheckboxColumn("Vybra≈•"),
                    uvery_columns["kde_som_si_pozical"]: st.column_config.TextColumn("Kde som si po≈æiƒçal?", disabled=True),
                    uvery_columns["na_aky_ucel"]: st.column_config.TextColumn("Na ak√Ω √∫ƒçel?", disabled=True),
                    uvery_columns["kedy_som_si_pozical"]: st.column_config.DateColumn("Kedy som si po≈æiƒçal?", disabled=True, format="DD.MM.YYYY"),
                    uvery_columns["urokova_sadzba"]: st.column_config.NumberColumn("√örokov√° sadzba (%)", disabled=True, format="%.1f%%"),
                    uvery_columns["kolko_som_si_pozical"]: st.column_config.NumberColumn("Koƒæko som si po≈æiƒçal?", disabled=True, format="%.2f ‚Ç¨"),
                    uvery_columns["kolko_este_dlzim"]: st.column_config.NumberColumn("Koƒæko e≈°te dl≈æ√≠m?", disabled=True, format="%.2f ‚Ç¨"),
                    uvery_columns["aku_mam_mesacnu_splatku"]: st.column_config.NumberColumn("Mesaƒçn√° spl√°tka", disabled=True, format="%.2f ‚Ç¨"),
                }

                edited = st.data_editor(
                    df_for_display,
                    column_config=display_column_config,
                    num_rows="fixed",
                    use_container_width=True,
                    hide_index=True,
                    key="uvery_data",
                    row_height=40,
                )
                
                # Update session state only with selection changes (checkbox column)
                if "Vybra≈•" in edited.columns:
                    st.session_state.uvery_df["Vybra≈•"] = edited["Vybra≈•"]

            # Calculate totals for loans from state
            loan_total_borrowed = uvery_df[uvery_columns["kolko_som_si_pozical"]].fillna(0).sum() if not uvery_df.empty else 0
            loan_total_remaining = uvery_df[uvery_columns["kolko_este_dlzim"]].fillna(0).sum() if not uvery_df.empty else 0
            loan_total_monthly = uvery_df[uvery_columns["aku_mam_mesacnu_splatku"]].fillna(0).sum() if not uvery_df.empty else 0

            ""
            col1, col2, col3 = st.columns(3)
            with col1:
                st.markdown(f"**Celkom po≈æiƒçky: {loan_total_borrowed:.2f} ‚Ç¨**")
            with col2:
                st.markdown(f"**Celkom dlhy: {loan_total_remaining:.2f} ‚Ç¨**")
            with col3:
                st.markdown(f"**Spl√°tky mesaƒçne: {loan_total_monthly:.2f} ‚Ç¨**")
            
            #st.markdown("---")
            
            # Second table - EXEK√öCIE (Executions)
            st.markdown("<hr style='border: 1px solid #2870ed'>", unsafe_allow_html=True)
            
            st.markdown("#### **Exek√∫cie**")

            # Initialize executions storage in session state
            if "exekucie_df" not in st.session_state:
                # Check if we have existing data to load
                if default_exekucie_domacnosti:
                    # Load existing execution data from database
                    try:
                        loaded_df = pd.DataFrame(default_exekucie_domacnosti)
                        # Ensure all required columns exist
                        required_columns = {
                            "Vybra≈•": "bool",
                            "ID": "string",
                            "Meno exek√∫tora": "string",
                            "Pre koho exek√∫tor vym√°ha dlh?": "string",
                            "Od kedy m√°m exek√∫ciu?": "string",
                            "Aktu√°lna v√Ω≈°ka exek√∫cie?": "int",
                            "Akou sumou ju mesaƒçne spl√°cam?": "int",
                        }
                        
                        for col, dtype in required_columns.items():
                            if col not in loaded_df.columns:
                                if dtype == "bool":
                                    loaded_df[col] = False
                                elif dtype == "string":
                                    loaded_df[col] = ""
                                elif dtype == "int":
                                    loaded_df[col] = 0
                        
                        # Reorder columns to match expected order
                        column_order = ["Vybra≈•", "ID", "Meno exek√∫tora", "Pre koho exek√∫tor vym√°ha dlh?", 
                                      "Od kedy m√°m exek√∫ciu?", "Aktu√°lna v√Ω≈°ka exek√∫cie?", "Akou sumou ju mesaƒçne spl√°cam?"]
                        st.session_state.exekucie_df = loaded_df.reindex(columns=column_order, fill_value="")
                    except Exception as e:
                        # If loading fails, create empty dataframe
                        st.session_state.exekucie_df = pd.DataFrame({
                            "Vybra≈•": pd.Series(dtype="bool"),
                            "ID": pd.Series(dtype="string"),
                            "Meno exek√∫tora": pd.Series(dtype="string"),
                            "Pre koho exek√∫tor vym√°ha dlh?": pd.Series(dtype="string"),
                            "Od kedy m√°m exek√∫ciu?": pd.Series(dtype="string"),
                            "Aktu√°lna v√Ω≈°ka exek√∫cie?": pd.Series(dtype="int"),
                            "Akou sumou ju mesaƒçne spl√°cam?": pd.Series(dtype="int"),
                        })
                else:
                    # Create empty dataframe for new records
                    st.session_state.exekucie_df = pd.DataFrame({
                        "Vybra≈•": pd.Series(dtype="bool"),
                        "ID": pd.Series(dtype="string"),
                        "Meno exek√∫tora": pd.Series(dtype="string"),
                        "Pre koho exek√∫tor vym√°ha dlh?": pd.Series(dtype="string"),
                        "Od kedy m√°m exek√∫ciu?": pd.Series(dtype="string"),
                        "Aktu√°lna v√Ω≈°ka exek√∫cie?": pd.Series(dtype="int"),
                        "Akou sumou ju mesaƒçne spl√°cam?": pd.Series(dtype="int"),
                    })

            # Ensure selection column exists for older sessions
            if "Vybra≈•" not in st.session_state.exekucie_df.columns:
                st.session_state.exekucie_df.insert(0, "Vybra≈•", False)
            
            # Migrate old "ƒå√≠slo" column to new "ID" system for existing data
            if "ƒå√≠slo" in st.session_state.exekucie_df.columns and "ID" not in st.session_state.exekucie_df.columns:
                st.session_state.exekucie_df = st.session_state.exekucie_df.rename(columns={"ƒå√≠slo": "ID"})
                # Generate proper IDs for existing entries
                for i in range(len(st.session_state.exekucie_df)):
                    if pd.isna(st.session_state.exekucie_df.iloc[i]["ID"]) or st.session_state.exekucie_df.iloc[i]["ID"] == "":
                        st.session_state.exekucie_df.iloc[i, st.session_state.exekucie_df.columns.get_loc("ID")] = f"EX{int(time.time()*1000) + i}"

            # Initialize execution ID counter if not exists
            if "exekucie_id_counter" not in st.session_state:
                st.session_state.exekucie_id_counter = 1

            def _generate_exekucie_id() -> str:
                """Generate a unique ID for executions"""
                timestamp = int(time.time() * 1000)  # milliseconds since epoch
                counter = st.session_state.exekucie_id_counter
                st.session_state.exekucie_id_counter += 1
                return f"EX{timestamp}{counter:03d}"

            def add_new_exekucia():
                """Add a new execution row to the dataframe"""
                # First, save any current edits from the data editor to prevent data loss
                # Use the stored edited data if available, otherwise use the current widget data
                edited_data = None
                if "exekucie_edited_data" in st.session_state:
                    edited_data = st.session_state["exekucie_edited_data"]
                elif "_exekucie_data" in st.session_state:
                    edited_data = st.session_state["_exekucie_data"]
                
                if edited_data is not None and isinstance(edited_data, pd.DataFrame):
                    # Merge the edited data with the main dataframe, preserving IDs
                    if "ID" in st.session_state.exekucie_df.columns:
                        edited_data_with_id = edited_data.copy()
                        edited_data_with_id.insert(1, "ID", st.session_state.exekucie_df["ID"])
                        st.session_state.exekucie_df = edited_data_with_id
                    else:
                        st.session_state.exekucie_df = edited_data
                
                new_id = _generate_exekucie_id()
                new_row = {
                    "Vybra≈•": False,
                    "ID": new_id,
                    "Meno exek√∫tora": "",
                    "Pre koho exek√∫tor vym√°ha dlh?": "",
                    "Od kedy m√°m exek√∫ciu?": "",
                    "Aktu√°lna v√Ω≈°ka exek√∫cie?": 0,
                    "Akou sumou ju mesaƒçne spl√°cam?": 0,
                }
                
                # Add to dataframe - ensure we're working with the current session state
                new_df = pd.DataFrame([new_row])
                st.session_state.exekucie_df = pd.concat([st.session_state.exekucie_df, new_df], ignore_index=True)

            # Editor for executions
            exekucie_column_config = {
                "Vybra≈•": st.column_config.CheckboxColumn("Vybra≈•"),
                "ID": st.column_config.TextColumn("ID", disabled=True, width="small"),
                "Meno exek√∫tora": st.column_config.TextColumn("Meno exek√∫tora", max_chars=200),
                "Pre koho exek√∫tor vym√°ha dlh?": st.column_config.TextColumn("Pre koho exek√∫tor vym√°ha dlh?", max_chars=200),
                "Od kedy m√°m exek√∫ciu?": st.column_config.TextColumn("Od kedy m√°m exek√∫ciu?", max_chars=100),
                "Aktu√°lna v√Ω≈°ka exek√∫cie?": st.column_config.NumberColumn("Aktu√°lna v√Ω≈°ka exek√∫cie?", min_value=0, step=1, format="%d ‚Ç¨"),
                "Akou sumou ju mesaƒçne spl√°cam?": st.column_config.NumberColumn("Akou sumou ju mesaƒçne spl√°cam?", min_value=0, step=1, format="%d ‚Ç¨"),
            }

            # Order columns in the editor
            cols_order = [
                "Vybra≈•",
                "ID",
                "Meno exek√∫tora",
                "Pre koho exek√∫tor vym√°ha dlh?",
                "Od kedy m√°m exek√∫ciu?",
                "Aktu√°lna v√Ω≈°ka exek√∫cie?",
                "Akou sumou ju mesaƒçne spl√°cam?",
            ]
            # Ensure all columns exist in the correct order
            for col in cols_order:
                if col not in st.session_state.exekucie_df.columns:
                    if col in ["Meno exek√∫tora", "Pre koho exek√∫tor vym√°ha dlh?", "Od kedy m√°m exek√∫ciu?", "ID"]:
                        st.session_state.exekucie_df[col] = ""
                    elif col == "Vybra≈•":
                        st.session_state.exekucie_df[col] = False
                    else:
                        st.session_state.exekucie_df[col] = 0
            
            # Configure columns for editing (only ID disabled)
            editable_column_config = {
                "Vybra≈•": st.column_config.CheckboxColumn("Vybra≈•"),
                "ID": st.column_config.TextColumn("ID", disabled=True, width="small"),
                "Meno exek√∫tora": st.column_config.TextColumn("Meno exek√∫tora", max_chars=200, required=True),
                "Pre koho exek√∫tor vym√°ha dlh?": st.column_config.TextColumn("Pre koho exek√∫tor vym√°ha dlh?", max_chars=200, required=True),
                "Od kedy m√°m exek√∫ciu?": st.column_config.TextColumn("Od kedy m√°m exek√∫ciu?", max_chars=100),
                "Aktu√°lna v√Ω≈°ka exek√∫cie?": st.column_config.NumberColumn("Aktu√°lna v√Ω≈°ka exek√∫cie?", min_value=0, step=1, format="%d ‚Ç¨"),
                "Akou sumou ju mesaƒçne spl√°cam?": st.column_config.NumberColumn("Akou sumou ju mesaƒçne spl√°cam?", min_value=0, step=1, format="%d ‚Ç¨"),
            }

            # Display executions in an editable table - following your example pattern
            exekucie_df = st.session_state.exekucie_df
            
            # Controls: add / delete selected (always visible)
            ctrl_ex1, ctrl_ex2 = st.columns([1, 1], vertical_alignment="bottom")
            
            # Add execution button (always visible)
            with ctrl_ex1:
                if st.button("‚ûï Prida≈• exek√∫ciu", use_container_width=True, key="add_exekucia_btn"):
                    add_new_exekucia()
                    st.rerun()
            
            # Delete execution button (always visible)
            with ctrl_ex2:
                if st.button("üóëÔ∏è Zmaza≈• vybran√∫", use_container_width=True, key="delete_exekucia_btn"):
                    # First, save any current edits from the data editor to prevent data loss
                    edited_data = None
                    if "exekucie_edited_data" in st.session_state:
                        edited_data = st.session_state["exekucie_edited_data"]
                    elif "_exekucie_data" in st.session_state:
                        edited_data = st.session_state["_exekucie_data"]
                    
                    if edited_data is not None and isinstance(edited_data, pd.DataFrame):
                        # Merge the edited data with the main dataframe, preserving IDs
                        if "ID" in st.session_state.exekucie_df.columns:
                            edited_data_with_id = edited_data.copy()
                            edited_data_with_id.insert(1, "ID", st.session_state.exekucie_df["ID"])
                            st.session_state.exekucie_df = edited_data_with_id
                        else:
                            st.session_state.exekucie_df = edited_data
                    
                    df = st.session_state.exekucie_df
                    # Find selected rows
                    if "Vybra≈•" in df.columns:
                        selected_idxs = df.index[df["Vybra≈•"] == True].tolist()
                        if len(selected_idxs) == 0:
                            st.warning("‚ö†Ô∏è Oznaƒçte jeden riadok v tabuƒæke na zmazanie (stƒ∫pec 'Vybra≈•').")
                        elif len(selected_idxs) > 1:
                            st.warning("‚ö†Ô∏è Oznaƒçte iba jeden riadok na zmazanie.")
                        else:
                            # Get the ID of the row being deleted
                            deleted_id = df.iloc[selected_idxs[0]]["ID"] if "ID" in df.columns else "N/A"
                            # Delete the selected row
                            st.session_state.exekucie_df = df.drop(index=selected_idxs[0]).reset_index(drop=True)
                            #st.success(f"‚úÖ Exek√∫cia {deleted_id} bola zmazan√°")
                            st.rerun()
                    else:
                        st.error("‚ùå Chyba: Stƒ∫pec 'Vybra≈•' nebol n√°jden√Ω")
            
            if exekucie_df.empty:
                st.caption("Zatiaƒæ nie s√∫ pridan√© ≈æiadne exek√∫cie. Kliknite na '‚ûï Prida≈• exek√∫ciu' pre pridanie nov√©ho.")
            else:
                # Create a copy without the ID column for display
                display_df = exekucie_df.drop(columns=["ID"], errors="ignore")
                
                # Create column config without ID column
                display_column_config = {k: v for k, v in editable_column_config.items() if k != "ID"}

                edited_exekucie_df = st.data_editor(
                    display_df,
                    column_config=display_column_config,
                    num_rows="fixed",
                    use_container_width=True,
                    hide_index=True,
                    key="_exekucie_data",
                    row_height=40,
                )
                
                # Store the edited data for persistence across reruns
                # Note: We don't update st.session_state.exekucie_df here as it causes
                # the data editor issue described in the Streamlit discussion
                st.session_state["exekucie_edited_data"] = edited_exekucie_df.copy()



            # Calculate totals for executions from the most up-to-date data
            # Clear cached edited data if main dataframe is empty
            if st.session_state.exekucie_df.empty and "exekucie_edited_data" in st.session_state:
                del st.session_state["exekucie_edited_data"]
            
            exekucie_data_for_totals = _get_exekucie_data_for_save()
            if exekucie_data_for_totals and len(exekucie_data_for_totals) > 0:
                df_ex = pd.DataFrame(exekucie_data_for_totals)
                for col in ["Aktu√°lna v√Ω≈°ka exek√∫cie?", "Akou sumou ju mesaƒçne spl√°cam?"]:
                    if col in df_ex.columns:
                        df_ex[col] = pd.to_numeric(df_ex[col], errors="coerce").fillna(0)
                execution_total_amount = int(df_ex["Aktu√°lna v√Ω≈°ka exek√∫cie?"].sum())
                execution_total_monthly = int(df_ex["Akou sumou ju mesaƒçne spl√°cam?"].sum())
            else:
                execution_total_amount = 0
                execution_total_monthly = 0

            ""
            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f"**Celkom exek√∫cie: {execution_total_amount} ‚Ç¨**")
            with col2:
                st.markdown(f"**Spl√°tky mesaƒçne: {execution_total_monthly} ‚Ç¨**")

            
            ###########################################################
            # Third table - NEDOPLATKY (Arrears)
            ###########################################################
            st.markdown("<hr style='border: 1px solid #2870ed'>", unsafe_allow_html=True)
            st.markdown("#### **Nedoplatky**")
            # Define nedoplatky columns
            nedoplatky_columns = {
                "kde_mam_nedoplatok": "Kde m√°m nedoplatok?",
                "od_kedy_mam_nedoplatok": "Od kedy m√°m nedoplatok?",
                "v_akej_vyske_mam_nedoplatok": "V akej v√Ω≈°ke m√°m nedoplatok?",
                "akou_sumou_ho_mesacne_splacam": "Akou sumou ho mesaƒçne spl√°cam?"
            }

            # Initialize nedoplatky storage in session state
            if "nedoplatky_data" not in st.session_state:
                # Check if we have existing data to load
                if default_nedoplatky_data:
                    # Load existing nedoplatky data from database
                    try:
                        loaded_df = pd.DataFrame(default_nedoplatky_data)
                        # Ensure all required columns exist
                        required_columns = {
                            "Vybra≈•": "bool",
                            "ID": "string",
                            nedoplatky_columns["kde_mam_nedoplatok"]: "string",
                            nedoplatky_columns["od_kedy_mam_nedoplatok"]: "string",
                            nedoplatky_columns["v_akej_vyske_mam_nedoplatok"]: "int",
                            nedoplatky_columns["akou_sumou_ho_mesacne_splacam"]: "int",
                        }
                        
                        for col, dtype in required_columns.items():
                            if col not in loaded_df.columns:
                                if dtype == "bool":
                                    loaded_df[col] = False
                                elif dtype == "string":
                                    loaded_df[col] = ""
                                elif dtype == "int":
                                    loaded_df[col] = 0
                        
                        # Reorder columns to match expected order
                        column_order = ["Vybra≈•", "ID", nedoplatky_columns["kde_mam_nedoplatok"], 
                                      nedoplatky_columns["od_kedy_mam_nedoplatok"], nedoplatky_columns["v_akej_vyske_mam_nedoplatok"], 
                                      nedoplatky_columns["akou_sumou_ho_mesacne_splacam"]]
                        st.session_state.nedoplatky_data = loaded_df.reindex(columns=column_order, fill_value="")
                    except Exception as e:
                        # If loading fails, create empty dataframe
                        st.session_state.nedoplatky_data = pd.DataFrame({
                            "Vybra≈•": pd.Series(dtype="bool"),
                            "ID": pd.Series(dtype="string"),
                            nedoplatky_columns["kde_mam_nedoplatok"]: pd.Series(dtype="string"),
                            nedoplatky_columns["od_kedy_mam_nedoplatok"]: pd.Series(dtype="string"),
                            nedoplatky_columns["v_akej_vyske_mam_nedoplatok"]: pd.Series(dtype="int"),
                            nedoplatky_columns["akou_sumou_ho_mesacne_splacam"]: pd.Series(dtype="int"),
                        })
                else:
                    # Create empty dataframe for new records
                    st.session_state.nedoplatky_data = pd.DataFrame({
                        "Vybra≈•": pd.Series(dtype="bool"),
                        "ID": pd.Series(dtype="string"),
                        nedoplatky_columns["kde_mam_nedoplatok"]: pd.Series(dtype="string"),
                        nedoplatky_columns["od_kedy_mam_nedoplatok"]: pd.Series(dtype="string"),
                        nedoplatky_columns["v_akej_vyske_mam_nedoplatok"]: pd.Series(dtype="int"),
                        nedoplatky_columns["akou_sumou_ho_mesacne_splacam"]: pd.Series(dtype="int"),
                    })

            # Ensure selection column exists for older sessions
            if "Vybra≈•" not in st.session_state.nedoplatky_data.columns:
                st.session_state.nedoplatky_data.insert(0, "Vybra≈•", False)

            # Migrate old data to include ID column
            if "ID" not in st.session_state.nedoplatky_data.columns:
                st.session_state.nedoplatky_data.insert(1, "ID", "")
                # Generate IDs for existing entries
                for i in range(len(st.session_state.nedoplatky_data)):
                    if pd.isna(st.session_state.nedoplatky_data.iloc[i]["ID"]) or st.session_state.nedoplatky_data.iloc[i]["ID"] == "":
                        st.session_state.nedoplatky_data.iloc[i, st.session_state.nedoplatky_data.columns.get_loc("ID")] = f"ND{int(time.time()*1000) + i}"

            # Initialize nedoplatky ID counter if not exists
            if "nedoplatky_id_counter" not in st.session_state:
                st.session_state.nedoplatky_id_counter = 1

            def _generate_nedoplatky_id() -> str:
                """Generate a unique ID for nedoplatky entries"""
                timestamp = int(time.time() * 1000)  # milliseconds since epoch
                counter = st.session_state.nedoplatky_id_counter
                st.session_state.nedoplatky_id_counter += 1
                return f"ND{timestamp}{counter:03d}"

            nedoplatky_categories = ["Bytospr√°vca", "Telef√≥n", "Energie", "Zdravotn√° pois≈•ov≈àa", "Soc. pois≈•ov≈àa", "Pokuty, dane a pod."]

            def add_new_nedoplatok():
                """Add a new nedoplatok row to the dataframe"""
                # First, save any current edits from the data editor to prevent data loss
                # Use the stored edited data if available, otherwise use the current widget data
                edited_data = None
                if "nedoplatky_edited_data" in st.session_state:
                    edited_data = st.session_state["nedoplatky_edited_data"]
                elif "nedoplatky_editor" in st.session_state:
                    edited_data = st.session_state["nedoplatky_editor"]
                
                if edited_data is not None and isinstance(edited_data, pd.DataFrame):
                    # Merge the edited data with the main dataframe, preserving IDs
                    if "ID" in edited_data.columns:
                        # ID column already exists, just use the edited data
                        st.session_state.nedoplatky_data = edited_data
                    elif "ID" in st.session_state.nedoplatky_data.columns:
                        # Add the ID column back to the edited data
                        edited_data_with_id = edited_data.copy()
                        edited_data_with_id.insert(1, "ID", st.session_state.nedoplatky_data["ID"])
                        st.session_state.nedoplatky_data = edited_data_with_id
                    else:
                        st.session_state.nedoplatky_data = edited_data
                
                new_id = _generate_nedoplatky_id()
                new_row = {
                    "Vybra≈•": False,
                    "ID": new_id,
                    nedoplatky_columns["kde_mam_nedoplatok"]: "",
                    nedoplatky_columns["od_kedy_mam_nedoplatok"]: "",
                    nedoplatky_columns["v_akej_vyske_mam_nedoplatok"]: 0,
                    nedoplatky_columns["akou_sumou_ho_mesacne_splacam"]: 0,
                }
                
                # Add to dataframe
                new_df = pd.DataFrame([new_row])
                st.session_state.nedoplatky_data = pd.concat([st.session_state.nedoplatky_data, new_df], ignore_index=True)


            # Display nedoplatky entries in an editable table
            nedoplatky_df = st.session_state.nedoplatky_data
            
            # Controls: add / delete selected (always visible)
            ctrl_nd1, ctrl_nd2 = st.columns(2, vertical_alignment="top")
            
            # Add nedoplatok button (always visible)
            with ctrl_nd1:
                if st.button("‚ûï Prida≈• nedoplatok", use_container_width=True, key="add_nedoplatky_btn"):
                    add_new_nedoplatok()
                    st.rerun()
            
            # Delete nedoplatok button (always visible)
            with ctrl_nd2:
                if st.button("üóëÔ∏è Zmaza≈• vybran√Ω", use_container_width=True, key="delete_nedoplatky_btn"):
                    # First, save any current edits from the data editor to prevent data loss
                    edited_data = None
                    if "nedoplatky_edited_data" in st.session_state:
                        edited_data = st.session_state["nedoplatky_edited_data"]
                    elif "nedoplatky_editor" in st.session_state:
                        edited_data = st.session_state["nedoplatky_editor"]
                    
                    if edited_data is not None and isinstance(edited_data, pd.DataFrame):
                        # Merge the edited data with the main dataframe, preserving IDs
                        if "ID" in edited_data.columns:
                            # ID column already exists, just use the edited data
                            st.session_state.nedoplatky_data = edited_data
                        elif "ID" in st.session_state.nedoplatky_data.columns:
                            # Add the ID column back to the edited data
                            edited_data_with_id = edited_data.copy()
                            edited_data_with_id.insert(1, "ID", st.session_state.nedoplatky_data["ID"])
                            st.session_state.nedoplatky_data = edited_data_with_id
                        else:
                            st.session_state.nedoplatky_data = edited_data
                    
                    df = st.session_state.nedoplatky_data
                    # Find selected rows
                    if "Vybra≈•" in df.columns:
                        selected_idxs = df.index[df["Vybra≈•"] == True].tolist()
                        if len(selected_idxs) == 0:
                            st.warning("‚ö†Ô∏è Oznaƒçte jeden riadok v tabuƒæke na zmazanie (stƒ∫pec 'Vybra≈•').")
                        elif len(selected_idxs) > 1:
                            st.warning("‚ö†Ô∏è Oznaƒçte iba jeden riadok na zmazanie.")
                        else:
                            # Get the ID of the row being deleted
                            deleted_id = df.iloc[selected_idxs[0]]["ID"] if "ID" in df.columns else "N/A"
                            # Delete the selected row
                            st.session_state.nedoplatky_data = df.drop(index=selected_idxs[0]).reset_index(drop=True)
                            #st.success(f"‚úÖ Nedoplatok {deleted_id} bol zmazan√Ω")
                            st.rerun()
                    else:
                        st.error("‚ùå Chyba: Stƒ∫pec 'Vybra≈•' nebol n√°jden√Ω")
            
            if nedoplatky_df.empty:
                st.caption("Zatiaƒæ nie s√∫ pridan√© ≈æiadne nedoplatky. Kliknite na '‚ûï Prida≈• nedoplatok' pre pridanie nov√©ho.")
            else:
                # Create a display version without ID column
                display_df = nedoplatky_df.drop(columns=["ID"], errors="ignore")
                
                # Configure columns for editing
                editable_column_config = {
                    "Vybra≈•": st.column_config.CheckboxColumn("Vybra≈•"),
                    nedoplatky_columns["kde_mam_nedoplatok"]: st.column_config.SelectboxColumn(
                        "Kde m√°m nedoplatok?", 
                        options=nedoplatky_categories + ["In√©"],
                        required=True
                    ),
                    nedoplatky_columns["od_kedy_mam_nedoplatok"]: st.column_config.TextColumn("Od kedy m√°m nedoplatok?", max_chars=100),
                    nedoplatky_columns["v_akej_vyske_mam_nedoplatok"]: st.column_config.NumberColumn("V akej v√Ω≈°ke m√°m nedoplatok?", min_value=0, step=1, format="%d ‚Ç¨"),
                    nedoplatky_columns["akou_sumou_ho_mesacne_splacam"]: st.column_config.NumberColumn("Akou sumou ho mesaƒçne spl√°cam?", min_value=0, step=1, format="%d ‚Ç¨"),
                }

                edited = st.data_editor(
                    display_df,
                    column_config=editable_column_config,
                    num_rows="fixed",
                    use_container_width=True,
                    hide_index=True,
                    key="nedoplatky_editor",
                    row_height=40,
                )
                
                # Store the edited data for persistence across reruns
                # Note: We don't update st.session_state.nedoplatky_data here as it causes
                # the data editor issue described in the Streamlit discussion
                st.session_state["nedoplatky_edited_data"] = edited.copy()

            # Calculate totals for nedoplatky from the most up-to-date data
            # Clear cached edited data if main dataframe is empty
            if st.session_state.nedoplatky_data.empty and "nedoplatky_edited_data" in st.session_state:
                del st.session_state["nedoplatky_edited_data"]
            
            nedoplatky_data_for_totals = _get_nedoplatky_data_for_save()
            if nedoplatky_data_for_totals and len(nedoplatky_data_for_totals) > 0:
                df_nedoplatky = pd.DataFrame(nedoplatky_data_for_totals)
                nedoplatok_columns_for_calc = [nedoplatky_columns["v_akej_vyske_mam_nedoplatok"], nedoplatky_columns["akou_sumou_ho_mesacne_splacam"]]
                for col in nedoplatok_columns_for_calc:
                    if col in df_nedoplatky.columns:
                        df_nedoplatky[col] = pd.to_numeric(df_nedoplatky[col], errors="coerce").fillna(0)
                arrears_total_amount = int(df_nedoplatky[nedoplatky_columns["v_akej_vyske_mam_nedoplatok"]].sum())
                arrears_total_monthly = int(df_nedoplatky[nedoplatky_columns["akou_sumou_ho_mesacne_splacam"]].sum())
            else:
                arrears_total_amount = 0
                arrears_total_monthly = 0
            
            ""
            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f"**Celkom nedoplatky: {arrears_total_amount} ‚Ç¨**")
            with col2:
                st.markdown(f"**Spl√°tky mesaƒçne: {arrears_total_monthly} ‚Ç¨**")
            
            st.markdown("<hr style='border: 1px solid #2870ed'>", unsafe_allow_html=True)
            
            poznamky_dlhy = st.text_area(
                "Pozn√°mky k dlhom:",
                height=75,
                value=default_poznamky_dlhy
            )

        background_color(
            background_color="#2870ed", 
            text_color="#ffffff", 
            header_text="Koment√°r pracovn√≠ka SLSP",
            text="Ak√© kroky boli s klientom realizovan√© zo strany poboƒçky a s ak√Ωm v√Ωsledkom (napr. ≈æiados≈• o ≈§≈ΩS, prehodnotenie US, predƒ∫≈æenie splatnosti √∫verov, ≈æiados≈• o refinanƒçn√Ω √∫ver, zapojenie ƒèal≈°√≠ch rodinn√Ωch pr√≠slu≈°n√≠kov a pod.)"
        )

        with st.container(border=True):
            komentar_pracovnika_slsp = st.text_area(
                "Koment√°r pracovn√≠ka SLSP",
                label_visibility="collapsed",
                value=default_komentar_pracovnika_slsp,
                height=150
            )

        
        # Simple function to remove quotes from text
        def clean_text(text):
            if isinstance(text, str):
                return text.replace('"', '').replace('"', '').replace('"', '')
            return text
        
        # Create the data to save
        data_to_save = {
            "meno_priezvisko": clean_text(meno_priezvisko),
            "datum_narodenia": datum_narodenia,
            "sap_id": sap_id,
            "email_zamestnanca": email_zamestnanca,
            "pribeh": clean_text(pribeh),
            "riesenie": clean_text(riesenie),
            "pocet_clenov_domacnosti": pocet_clenov_domacnosti,
            "typ_bydliska": typ_bydliska,
            "domacnost_poznamky": clean_text(domacnost_poznamky),
            "najom": najom,
            "tv_internet": tv_internet,
            "oblecenie_obuv": oblecenie_obuv,
            "sporenie": sporenie,
            "elektrina": elektrina,
            "lieky_zdravie": lieky_zdravie,
            "vydavky_na_deti": vydavky_na_deti,
            "vyzivne": vyzivne,
            "voda": voda,
            "hygiena_kozmetika_drogeria": hygiena_kozmetika_drogeria,
            "domace_zvierata": domace_zvierata,
            "podpora_rodicov": podpora_rodicov,
            "plyn": plyn,
            "strava_potraviny": strava_potraviny,
            "predplatne": predplatne,
            "odvody": odvody,
            "poistky": poistky,
            "splatky_uverov": splatky_uverov,
            "domacnost": domacnost,
            "kurenie": kurenie,
            "mhd_autobus_vlak": mhd_autobus_vlak,
            "cigarety": cigarety,
            "ine": ine,
            "ine_naklady_byvanie": ine_naklady_byvanie,
            "auto_pohonne_hmoty": auto_pohonne_hmoty,
            "alkohol_loteria_zreby": alkohol_loteria_zreby,
            "telefon": telefon,
            "auto_servis_pzp_dialnicne_poplatky": auto_servis_pzp_dialnicne_poplatky,
            "volny_cas": volny_cas,
            "poznamky_vydavky": clean_text(poznamky_vydavky),
            "poznamky_prijmy": clean_text(poznamky_prijmy),
            "prijmy_domacnosti": _get_prijmy_data_for_save(),
            "uvery_df": st.session_state.uvery_df.to_dict('records') if not st.session_state.uvery_df.empty else [],
            "exekucie_df": _get_exekucie_data_for_save(),
            "nedoplatky_data": _get_nedoplatky_data_for_save(),
            "komentar_pracovnika_slsp": clean_text(komentar_pracovnika_slsp),
            "poznamky_dlhy": clean_text(poznamky_dlhy),
            "ai_action_plan": st.session_state.get("ai_action_plan", ""),
            "ai_conversation_history": st.session_state.get("ai_conversation_history", [])
        }
        
        # Auto-save when data changes
        prijmy_data_for_check = _get_prijmy_data_for_save()
        uvery_data_for_check = st.session_state.uvery_df.to_dict('records') if not st.session_state.uvery_df.empty else []
        exekucie_data_for_check = _get_exekucie_data_for_save()
        nedoplatky_data_for_check = _get_nedoplatky_data_for_save()

        # ==============================
        # AI Action Plan Section
        # ==============================
        background_color(
            background_color="#2870ed", 
            text_color="#ffffff", 
            header_text="Akƒçn√Ω pl√°n", 
            text="AI-generovan√Ω n√°vrh rie≈°enia na z√°klade vyplnen√Ωch √∫dajov"
        )

        with st.container(border=True):
            # Initialize session state for AI action plan
            if "ai_action_plan" not in st.session_state:
                st.session_state.ai_action_plan = st.session_state.existing_data.get("ai_action_plan", "")
            if "ai_conversation_history" not in st.session_state:
                st.session_state.ai_conversation_history = st.session_state.existing_data.get("ai_conversation_history", [])
            if "ai_analysis_completed" not in st.session_state:
                st.session_state.ai_analysis_completed = bool(st.session_state.existing_data.get("ai_action_plan", ""))

            # Check if we have enough data for AI analysis
            has_minimal_data = (
                pribeh.strip() or riesenie.strip() or 
                len(prijmy_data_for_check) > 0 or
                len(uvery_data_for_check) > 0 or
                len(exekucie_data_for_check) > 0 or
                len(nedoplatky_data_for_check) > 0 or
                total_expenses > 0 or total_income > 0
            )

            if has_minimal_data:
                col1, col2 = st.columns([3, 1], vertical_alignment="bottom")
                
                with col1:
                    st.markdown("**Generovanie akƒçn√©ho pl√°nu**")
                    st.markdown("AI analyzuje vyplnen√© √∫daje a navrhuje rie≈°enie na mieru pre klienta.")
                
                with col2:
                    if st.button("Generova≈• akƒçn√Ω pl√°n", type="primary", use_container_width=True):
                        if not OPENAI_API_KEY:
                            st.error("‚ùå OpenAI API key nie je nakonfigurovan√Ω. Kontaktujte administr√°tora.")
                        else:
                            with st.spinner("AI analyzuje √∫daje a generuje akƒçn√Ω pl√°n..."):
                                try:
                                    # Format data for AI analysis
                                    zivotny_pribeh, domacnost_info, prijmy_text, vydavky_text, dlhy_text = format_form_data_for_ai(data_to_save)
                                    
                                    # Combine all information for AI
                                    tzs_history = f"Koment√°r pracovn√≠ka SLSP: {komentar_pracovnika_slsp}\n{domacnost_info}"
                                    zivotne_naklady = f"{prijmy_text}\n\n{vydavky_text}"
                                    uverove_prods = dlhy_text
                                    
                                    # Extract TZS history first
                                    tzs_count, tzs_result = extract_tzs_history(zivotny_pribeh, tzs_history)
                                    
                                    if tzs_count >= 2:
                                        # Go directly to comprehensive analysis (Phase 2)
                                        result = generate_action_plan(
                                            zivotny_pribeh,
                                            tzs_history,
                                            zivotne_naklady,
                                            uverove_prods,
                                            history=st.session_state.ai_conversation_history
                                        )
                                        st.session_state.ai_action_plan = f"**Hist√≥ria ≈§≈ΩS**:\n{tzs_result}\n\n**Komplexn√© rie≈°enie (F√°za 2)**:\n{result}"
                                    else:
                                        # Check if deferral is sufficient (Phase 1)
                                        deferral_result = check_deferral_sufficiency(
                                            zivotny_pribeh,
                                            tzs_history,
                                            zivotne_naklady,
                                            uverove_prods
                                        )
                                        
                                        if "Staƒç√≠ odklad: √Åno" in deferral_result:
                                            st.session_state.ai_action_plan = (
                                                f"**Hist√≥ria ≈§≈ΩS**:\n{tzs_result}\n\n"
                                                f"**V√Ωsledok anal√Ωzy odkladu spl√°tok (F√°za 1)**:\n{deferral_result}"
                                            )
                                        else:
                                            # Move to Phase 2
                                            result = generate_action_plan(
                                                zivotny_pribeh,
                                                tzs_history,
                                                zivotne_naklady,
                                                uverove_prods,
                                                history=st.session_state.ai_conversation_history
                                            )
                                            st.session_state.ai_action_plan = (
                                                f"**Hist√≥ria ≈§≈ΩS**:\n{tzs_result}\n\n"
                                                f"**V√Ωsledok anal√Ωzy odkladu spl√°tok (F√°za 1)**:\n{deferral_result}\n\n"
                                                f"**Komplexn√© rie≈°enie (F√°za 2)**:\n{result}"
                                            )
                                    
                                    st.session_state.ai_analysis_completed = True
                                    st.success("‚úÖ Akƒçn√Ω pl√°n bol √∫spe≈°ne vygenerovan√Ω!")
                                    st.rerun()
                                    
                                except Exception as e:
                                    st.error(f"‚ùå Chyba pri generovan√≠ akƒçn√©ho pl√°nu: {str(e)}")
                                    st.session_state.ai_analysis_completed = False

                # Display the generated action plan
                if st.session_state.ai_action_plan:
                    st.markdown("---")
                    st.markdown("### üìã Vygenerovan√Ω akƒçn√Ω pl√°n")
                    st.text_area(
                        "Akƒçn√Ω pl√°n",
                        value=st.session_state.ai_action_plan,
                        height=600,
                        key="ai_action_plan_display",
                        label_visibility="collapsed"
                    )
                    
                    # Follow-up conversation option
                    st.markdown("---")
                    st.markdown("### üí¨ Pokraƒçova≈• v konverz√°cii s AI")
                    follow_up_input = st.text_area(
                        "Zadajte dopl≈àuj√∫cu ot√°zku alebo pokraƒçovanie:",
                        key="ai_follow_up_input",
                        height=100,
                        placeholder="Napr√≠klad: M√¥≈æete upresni≈• rie≈°enie pre konkr√©tny √∫ver?"
                    )
                    
                    col1, col2 = st.columns([1, 1])
                    with col1:
                        if st.button("üì§ Odosla≈• pokraƒçovanie", use_container_width=True):
                            if follow_up_input.strip():
                                try:
                                    # Add follow-up question to history
                                    st.session_state.ai_conversation_history.append({
                                        "role": "user", 
                                        "content": follow_up_input
                                    })
                                    
                                    # Generate response with current history
                                    zivotny_pribeh, domacnost_info, prijmy_text, vydavky_text, dlhy_text = format_form_data_for_ai(data_to_save)
                                    tzs_history = f"Koment√°r pracovn√≠ka SLSP: {komentar_pracovnika_slsp}\n{domacnost_info}"
                                    zivotne_naklady = f"{prijmy_text}\n\n{vydavky_text}"
                                    uverove_prods = dlhy_text
                                    
                                    result = generate_follow_up_response(
                                        follow_up_input,
                                        zivotny_pribeh,
                                        tzs_history,
                                        zivotne_naklady,
                                        uverove_prods,
                                        history=st.session_state.ai_conversation_history
                                    )
                                    
                                    # Add assistant response to history
                                    st.session_state.ai_conversation_history.append({
                                        "role": "assistant", 
                                        "content": result
                                    })
                                    
                                    # Update action plan with follow-up response
                                    st.session_state.ai_action_plan += f"\n\n---\n\n**Dopl≈àuj√∫ca ot√°zka**: {follow_up_input}\n\n**Odpoveƒè AI**:\n{result}"
                                    st.success("‚úÖ Odpoveƒè bola pridan√° do akƒçn√©ho pl√°nu!")
                                    st.rerun()
                                    
                                except Exception as e:
                                    st.error(f"‚ùå Chyba pri spracovan√≠ ot√°zky: {str(e)}")
                            else:
                                st.warning("‚ö†Ô∏è Zadajte ot√°zku pred odoslan√≠m.")
                    
                    with col2:
                        if st.button("üîÑ Resetova≈• konverz√°ciu", use_container_width=True):
                            st.session_state.ai_conversation_history = []
                            st.session_state.ai_action_plan = ""
                            st.session_state.ai_analysis_completed = False
                            st.success("‚úÖ Konverz√°cia bola resetovan√°!")
                            st.rerun()
            else:
                st.info("üí° Vypl≈àte z√°kladn√© √∫daje (pr√≠beh, pr√≠jmy, v√Ωdavky alebo dlhy) pre generovanie akƒçn√©ho pl√°nu.")
        
        has_data = (sap_id or email_zamestnanca or meno_priezvisko or 
                pribeh or riesenie or 
                pocet_clenov_domacnosti != 0 or typ_bydliska or domacnost_poznamky or 
                poznamky_prijmy or komentar_pracovnika_slsp or
                len(prijmy_data_for_check) > 0 or
                len(uvery_data_for_check) > 0 or
                len(exekucie_data_for_check) > 0 or
                len(nedoplatky_data_for_check) > 0 or
                poznamky_dlhy != "" or
                # Check if any expense field has been modified from its default value
                najom != default_najom or tv_internet != default_tv_internet or oblecenie_obuv != default_oblecenie_obuv or
                sporenie != default_sporenie or elektrina != default_elektrina or lieky_zdravie != default_lieky_zdravie or
                vydavky_na_deti != default_vydavky_na_deti or vyzivne != default_vyzivne or voda != default_voda or
                hygiena_kozmetika_drogeria != default_hygiena_kozmetika_drogeria or domace_zvierata != default_domace_zvierata or
                podpora_rodicov != default_podpora_rodicov or plyn != default_plyn or strava_potraviny != default_strava_potraviny or
                predplatne != default_predplatne or odvody != default_odvody or poistky != default_poistky or
                splatky_uverov != default_splatky_uverov or domacnost != default_domacnost or kurenie != default_kurenie or
                mhd_autobus_vlak != default_mhd_autobus_vlak or cigarety != default_cigarety or ine != default_ine or
                ine_naklady_byvanie != default_ine_naklady_byvanie or auto_pohonne_hmoty != default_auto_pohonne_hmoty or
                alkohol_loteria_zreby != default_alkohol_loteria_zreby or telefon != default_telefon or
                auto_servis_pzp_dialnicne_poplatky != default_auto_servis_pzp_dialnicne_poplatky or volny_cas != default_volny_cas)
    
       #st.write(data_to_save)
        if has_data:
            # Auto-save functionality
            db_manager = st.session_state.get("db_manager")
            if db_manager:
                save_status, save_message = auto_save_data(db_manager, cid, data_to_save)
            else:
                save_status, save_message = "error", "Database not connected"

            # Show auto-save status
            st.markdown("---")
            if save_status == "updated":
                st.success(f"üîÑ {save_message}")
            elif save_status == "created":
                st.info(f"‚ú® {save_message}")
            elif save_status == "error":
                st.error(f"‚ùå {save_message}")
        else:
            st.markdown("---")
            st.info("üí° Enter some data to enable auto-save")
    
    elif cid.strip():
        st.markdown("---")
        st.info("üí° Kliknite na 'Vyhƒæada≈•' pre pr√≠stup k formul√°ru")
    else:
        st.markdown("---")
        st.info("üí° Vlo≈æte CID a kliknite na 'Vyhƒæada≈•' pre pr√≠stup k formul√°ru")

if __name__ == "__main__":
    main()